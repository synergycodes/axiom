<<<<<<< HEAD
{
<<<<<<< HEAD
  "../ui/src/components/checkbox/checkbox.tsx": [
    {
      "description": "A customizable checkbox component that supports three states: checked, unchecked, and indeterminate. It can be used in forms or as a standalone control.",
      "methods": [],
      "displayName": "Checkbox",
      "props": {
        "size": {
          "required": false,
          "tsType": {
            "name": "SelectorSize"
          },
          "description": "The size of the checkbox",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          }
        },
        "indeterminate": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Whether the checkbox is in an indeterminate state"
        },
        "checked": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Whether the checkbox is checked"
        }
      }
    }
  ],
=======
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> f70719d (Add doc-extract plugin)
>>>>>>> 20599a2 (Add node doc)
  "../ui/src/components/accordion/accordion.tsx": [
    {
      "description": "An interactive UI component that lets users toggle the visibility of content.\nThe content section can be expanded to reveal details and collapsed to hide them,\nkeeping information organized and saving space. Commonly used in FAQs, settings panels,\nand documentation to present layered content efficiently.",
      "methods": [],
      "displayName": "Accordion",
      "props": {
        "icon": {
          "required": false,
          "tsType": {
            "name": "ReactReactNode",
            "raw": "React.ReactNode"
          },
          "description": "Icon content React Node"
        },
        "label": {
          "required": true,
          "tsType": {
            "name": "string"
          },
          "description": "Text displayed in the header"
        },
        "children": {
          "required": true,
          "tsType": {
            "name": "ReactReactNode",
            "raw": "React.ReactNode"
          },
          "description": "Contents of the collapsible section"
        },
        "isOpen": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "True if not collapsed"
        },
        "onToggleOpen": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(isOpen: boolean) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "boolean"
                  },
                  "name": "isOpen"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "Callback run when the open state changes"
        },
        "defaultOpen": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Initial open state",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
<<<<<<< HEAD
<<<<<<< HEAD
=======
=======
>>>>>>> f70719d (Add doc-extract plugin)
        }
      }
    }
  ],
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> 9e5369e (Add decision log listing)
=======
=======
>>>>>>> fb3ca13 (Clean up)
  "../ui/src/components/checkbox/checkbox.tsx": [
    {
      "description": "A customizable checkbox component that supports three states: checked, unchecked, and indeterminate. It can be used in forms or as a standalone control.",
      "methods": [],
      "displayName": "Checkbox",
      "props": {
        "size": {
          "required": false,
          "tsType": {
            "name": "SelectorSize"
          },
          "description": "The size of the checkbox",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          }
        },
        "indeterminate": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Whether the checkbox is in an indeterminate state"
        },
        "checked": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Whether the checkbox is checked"
        }
      }
    }
  ],
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> f70719d (Add doc-extract plugin)
=======
>>>>>>> 00200e7 (Create docs for NodePanel)
=======
>>>>>>> fb3ca13 (Clean up)
  "../ui/src/components/avatar/avatar.tsx": [
    {
      "description": "Component for displaying user avatars with various sizes",
      "methods": [],
      "displayName": "Avatar",
      "props": {
        "username": {
          "required": true,
          "tsType": {
            "name": "string"
          },
          "description": "Provide to use it as alt of the image for better a11y"
        },
        "imageUrl": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Image URL"
        },
        "size": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "'extra-large' | 'large' | 'medium' | 'small'",
            "elements": [
              {
                "name": "literal",
                "value": "'extra-large'"
              },
              {
                "name": "literal",
                "value": "'large'"
              },
              {
                "name": "literal",
                "value": "'medium'"
              },
              {
                "name": "literal",
                "value": "'small'"
              }
            ]
          },
          "description": "Size of the circle container",
          "defaultValue": {
            "value": "'extra-large'",
            "computed": false
          }
        }
      }
    }
  ],
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> 89cf5f0 (Fix node handle sizing)
  "../ui/src/components/menu/menu-item.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "MenuItem",
      "props": {
        "destructive": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "onClick": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => void",
            "signature": {
              "arguments": [],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "size": {
          "required": false,
          "tsType": {
            "name": "ItemSize"
          },
          "description": "",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          }
        }
      }
    }
  ],
<<<<<<< HEAD
  "../ui/src/components/checkbox/checkbox.tsx": [
    {
      "description": "A customizable checkbox component that supports three states: checked, unchecked, and indeterminate. It can be used in forms or as a standalone control.",
      "methods": [],
      "displayName": "Checkbox",
      "props": {
        "size": {
          "required": false,
          "tsType": {
            "name": "SelectorSize"
          },
          "description": "The size of the checkbox",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          }
        },
        "indeterminate": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Whether the checkbox is in an indeterminate state"
        },
        "checked": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Whether the checkbox is checked"
        }
      }
    }
  ],
  "../ui/src/components/input/input.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Input",
      "props": {
        "size": {
          "required": false,
          "tsType": {
            "name": "ItemSize"
          },
          "description": "Specifies the size of the input field.\nCan be 'small', 'medium', or 'large'.",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          }
        }
      }
    }
  ],
<<<<<<< HEAD
  "../ui/src/components/date-picker/date-picker.tsx": [
    {
      "description": "Component for selecting a date with customizable format and placeholder",
      "methods": [],
      "displayName": "DatePicker",
      "props": {
        "inputSize": {
          "required": false,
          "tsType": {
            "name": "ItemSize"
          },
          "description": "",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          }
        },
        "valueFormat": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Format string to control how the selected date is displayed\n(e.g., 'yyyy-MM-dd')",
          "defaultValue": {
            "value": "'DD/MM/YYYY'",
            "computed": false
          }
        },
        "placeholder": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Placeholder text to show when no date is selected",
          "defaultValue": {
            "value": "'dd/mm/yyyy'",
            "computed": false
          }
        },
        "type": {
          "required": false,
          "tsType": {
            "name": "DatePickerType"
          },
          "description": "Picker type",
          "defaultValue": {
            "value": "'default'",
            "computed": false
          }
        },
        "defaultValue": {
          "required": false,
          "tsType": {
            "name": "intersection['defaultValue']",
            "raw": "DatePickerProps['defaultValue']"
          },
          "description": "Default date value when the component is initially rendered.\n\nFor the \"default\" is a single date, for the \"range\" [date, date]; and for the \"multiple\", an array of dates."
        },
        "value": {
          "required": false,
          "tsType": {
            "name": "intersection['value']",
            "raw": "DatePickerProps['value']"
          },
          "description": "Controlled value for the selected date\n\nFor the \"default\" is a single date, for the \"range\" [date, date]; and for the \"multiple\", an array of dates."
>>>>>>> dcde824 (fix props and desc not displaying)
        }
      }
    }
  ],
=======
>>>>>>> 00200e7 (Create docs for NodePanel)
  "../ui/src/components/checkbox/checkbox.tsx": [
    {
      "description": "A customizable checkbox component that supports three states: checked, unchecked, and indeterminate. It can be used in forms or as a standalone control.",
      "methods": [],
      "displayName": "Checkbox",
      "props": {
        "size": {
          "required": false,
          "tsType": {
            "name": "SelectorSize"
          },
          "description": "The size of the checkbox",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          }
        },
        "indeterminate": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Whether the checkbox is in an indeterminate state"
        },
        "checked": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Whether the checkbox is checked"
        }
      }
    }
  ],
  "../ui/src/components/input/input.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Input",
      "props": {
        "size": {
          "required": false,
          "tsType": {
            "name": "ItemSize"
          },
          "description": "Specifies the size of the input field.\nCan be 'small', 'medium', or 'large'.",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          }
        }
      }
    }
  ],
  "../ui/src/components/avatar/avatar.tsx": [
    {
      "description": "Component for displaying user avatars with various sizes",
      "methods": [],
      "displayName": "Avatar",
      "props": {
        "username": {
          "required": true,
          "tsType": {
            "name": "string"
          },
          "description": "Provide to use it as alt of the image for better a11y"
        },
        "imageUrl": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Image URL"
        },
        "size": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "'extra-large' | 'large' | 'medium' | 'small'",
            "elements": [
              {
                "name": "literal",
                "value": "'extra-large'"
              },
              {
                "name": "literal",
                "value": "'large'"
              },
              {
                "name": "literal",
                "value": "'medium'"
              },
              {
                "name": "literal",
                "value": "'small'"
              }
            ]
          },
          "description": "Size of the circle container",
          "defaultValue": {
            "value": "'extra-large'",
            "computed": false
          }
        }
      }
    }
  ],
  "../ui/src/components/menu/menu-item.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "MenuItem",
      "props": {
        "destructive": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "onClick": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => void",
            "signature": {
              "arguments": [],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "size": {
          "required": false,
          "tsType": {
            "name": "ItemSize"
          },
          "description": "",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          }
        }
      }
    }
  ],
<<<<<<< HEAD
=======
=======
>>>>>>> 1f20cdb (Fix decision log listing generation)
=======
>>>>>>> 89cf5f0 (Fix node handle sizing)
>>>>>>> 20599a2 (Add node doc)
  "../ui/src/components/date-picker/date-picker.tsx": [
    {
      "description": "Component for selecting a date with customizable format and placeholder",
      "methods": [],
      "displayName": "DatePicker",
      "props": {
        "inputSize": {
          "required": false,
          "tsType": {
            "name": "ItemSize"
          },
          "description": "",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          }
        },
        "valueFormat": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Format string to control how the selected date is displayed\n(e.g., 'yyyy-MM-dd')",
          "defaultValue": {
            "value": "'DD/MM/YYYY'",
            "computed": false
          }
        },
        "placeholder": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Placeholder text to show when no date is selected",
          "defaultValue": {
            "value": "'dd/mm/yyyy'",
            "computed": false
          }
        },
        "type": {
          "required": false,
          "tsType": {
            "name": "DatePickerType"
          },
          "description": "Picker type",
          "defaultValue": {
            "value": "'default'",
            "computed": false
          }
        },
        "defaultValue": {
          "required": false,
          "tsType": {
            "name": "intersection['defaultValue']",
            "raw": "DatePickerProps['defaultValue']"
          },
          "description": "Default date value when the component is initially rendered.\n\nFor the \"default\" is a single date, for the \"range\" [date, date]; and for the \"multiple\", an array of dates."
        },
        "value": {
          "required": false,
          "tsType": {
            "name": "intersection['value']",
            "raw": "DatePickerProps['value']"
          },
          "description": "Controlled value for the selected date\n\nFor the \"default\" is a single date, for the \"range\" [date, date]; and for the \"multiple\", an array of dates."
        }
      }
    }
  ],
<<<<<<< HEAD
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
  "../ui/src/components/menu/menu-item.tsx": [
=======
  "../ui/src/components/menu/menu.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Menu",
      "props": {
        "items": {
          "required": true,
          "tsType": {
            "name": "Array",
            "elements": [
              {
                "name": "intersection",
                "raw": "ListItem & {\n  destructive?: boolean;\n  onClick?: () => void;\n  size?: ItemSize;\n}",
                "elements": [
                  {
                    "name": "ListItem"
                  },
                  {
                    "name": "signature",
                    "type": "object",
                    "raw": "{\n  destructive?: boolean;\n  onClick?: () => void;\n  size?: ItemSize;\n}",
                    "signature": {
                      "properties": [
                        {
                          "key": "destructive",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "onClick",
                          "value": {
                            "name": "signature",
                            "type": "function",
                            "raw": "() => void",
                            "signature": {
                              "arguments": [],
                              "return": {
                                "name": "void"
                              }
                            },
                            "required": false
                          }
                        },
                        {
                          "key": "size",
                          "value": {
                            "name": "ItemSize",
                            "required": false
                          }
                        }
                      ]
                    }
                  }
                ]
              }
            ],
            "raw": "MenuItemProps[]"
          },
          "description": "Array of menu items to be rendered in the menu.\nEach item can be either a regular menu item or a separator."
        },
=======
=======
>>>>>>> 1f20cdb (Fix decision log listing generation)
  "../ui/src/components/input/input.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Input",
      "props": {
<<<<<<< HEAD
>>>>>>> 00200e7 (Create docs for NodePanel)
=======
>>>>>>> 1f20cdb (Fix decision log listing generation)
        "size": {
          "required": false,
          "tsType": {
            "name": "ItemSize"
          },
<<<<<<< HEAD
<<<<<<< HEAD
          "description": "Size variant for the menu items.\n@default 'medium'",
=======
          "description": "Specifies the size of the input field.\nCan be 'small', 'medium', or 'large'.",
>>>>>>> 00200e7 (Create docs for NodePanel)
=======
          "description": "Specifies the size of the input field.\nCan be 'small', 'medium', or 'large'.",
>>>>>>> 1f20cdb (Fix decision log listing generation)
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          }
<<<<<<< HEAD
<<<<<<< HEAD
        },
        "placement": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "Placement | undefined",
            "elements": [
              {
                "name": "Placement"
              },
              {
                "name": "undefined"
              }
            ]
          },
          "description": "The preferred placement of the menu relative to its trigger element.\nUses Floating UI placement options.\n@default 'bottom-end'",
          "defaultValue": {
            "value": "'bottom-end'",
            "computed": false
          }
        },
        "children": {
          "required": true,
          "tsType": {
            "name": "ReactElement"
          },
          "description": "The trigger element that will open the menu when clicked.\nThis element will be wrapped in a button with appropriate ARIA attributes."
=======
>>>>>>> 00200e7 (Create docs for NodePanel)
=======
>>>>>>> 1f20cdb (Fix decision log listing generation)
        }
      }
    }
  ],
<<<<<<< HEAD
<<<<<<< HEAD
  "../ui/src/components/checkbox/checkbox.tsx": [
>>>>>>> 1d274a5 (add react flow styles to shadow dom)
=======
  "../ui/src/components/menu/menu-item.tsx": [
>>>>>>> 00200e7 (Create docs for NodePanel)
=======
  "../ui/src/components/menu/menu-item.tsx": [
>>>>>>> 1f20cdb (Fix decision log listing generation)
    {
      "description": "",
      "methods": [],
      "displayName": "MenuItem",
      "props": {
        "destructive": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        "onClick": {
=======
        "checked": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Whether the checkbox is checked"
        }
      }
    }
  ],
  "../ui/src/components/input/input.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Input",
      "props": {
        "size": {
          "required": false,
          "tsType": {
            "name": "ItemSize"
          },
          "description": "Specifies the size of the input field.\nCan be 'small', 'medium', or 'large'.",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          }
        }
      }
    }
  ],
  "../ui/src/components/radio-button/radio.tsx": [
=======
  "../ui/src/components/menu/menu-item.tsx": [
>>>>>>> fb3ca13 (Clean up)
    {
      "description": "A radio button component that allows users to select a single option from a group.",
      "methods": [],
      "displayName": "Radio",
      "props": {
        "size": {
          "required": false,
          "tsType": {
            "name": "SelectorSize"
          },
          "description": "The size of the radio button",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          }
        },
        "checked": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Whether the radio button is checked"
        },
        "name": {
          "required": true,
          "tsType": {
            "name": "string"
          },
          "description": "The name of the radio button group"
        },
        "value": {
          "required": true,
          "tsType": {
            "name": "union",
            "raw": "string | number",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "description": "The value of the radio button"
        },
        "onChange": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.ChangeEvent<HTMLInputElement>) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactChangeEvent",
                    "raw": "React.ChangeEvent<HTMLInputElement>",
                    "elements": [
                      {
                        "name": "HTMLInputElement"
                      }
                    ]
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "Callback fired when the radio button state changes"
        }
      }
    }
  ],
  "../ui/src/components/modal/modal.tsx": [
    {
      "description": "A modal dialog component that appears on top of the main content,",
      "methods": [],
      "displayName": "Modal",
      "props": {
        "title": {
          "required": true,
          "tsType": {
            "name": "string"
          },
          "description": "Title displayed in the modal header"
        },
        "subtitle": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Optional subtitle displayed below the title"
        },
        "children": {
          "required": false,
          "tsType": {
            "name": "ReactNode"
          },
          "description": "Content to be displayed in the modal body"
        },
        "footer": {
          "required": false,
          "tsType": {
            "name": "ReactNode"
          },
          "description": "Content to be displayed in the modal footer"
        },
        "size": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "'regular' | 'large'",
            "elements": [
              {
                "name": "literal",
                "value": "'regular'"
              },
              {
                "name": "literal",
                "value": "'large'"
              }
            ]
          },
          "description": "Size variant of the modal",
          "defaultValue": {
            "value": "'regular'",
            "computed": false
          }
        },
        "footerVariant": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "'integrated' | 'separated'",
            "elements": [
              {
                "name": "literal",
                "value": "'integrated'"
              },
              {
                "name": "literal",
                "value": "'separated'"
              }
            ]
          },
          "description": "Variant of the footer styling",
          "defaultValue": {
            "value": "'integrated'",
            "computed": false
          }
        },
        "open": {
          "required": true,
          "tsType": {
            "name": "boolean"
          },
          "description": "Controls the visibility of the modal"
        },
        "onClose": {
>>>>>>> 1d274a5 (add react flow styles to shadow dom)
=======
        "onClick": {
>>>>>>> 00200e7 (Create docs for NodePanel)
=======
        "onClick": {
>>>>>>> 1f20cdb (Fix decision log listing generation)
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => void",
            "signature": {
              "arguments": [],
              "return": {
                "name": "void"
              }
            }
          },
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> 00200e7 (Create docs for NodePanel)
=======
>>>>>>> 1f20cdb (Fix decision log listing generation)
          "description": ""
        },
        "size": {
          "required": false,
          "tsType": {
            "name": "ItemSize"
          },
          "description": "",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          }
<<<<<<< HEAD
<<<<<<< HEAD
=======
          "description": "Callback function called when the modal is closed"
>>>>>>> 1d274a5 (add react flow styles to shadow dom)
=======
>>>>>>> 00200e7 (Create docs for NodePanel)
=======
>>>>>>> 1f20cdb (Fix decision log listing generation)
        }
      }
    }
  ],
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> 1f20cdb (Fix decision log listing generation)
=======
>>>>>>> 89cf5f0 (Fix node handle sizing)
>>>>>>> 20599a2 (Add node doc)
  "../ui/src/components/menu/menu.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Menu",
      "props": {
        "items": {
          "required": true,
          "tsType": {
            "name": "Array",
            "elements": [
              {
                "name": "intersection",
                "raw": "ListItem & {\n  destructive?: boolean;\n  onClick?: () => void;\n  size?: ItemSize;\n}",
                "elements": [
                  {
                    "name": "ListItem"
                  },
                  {
                    "name": "signature",
                    "type": "object",
                    "raw": "{\n  destructive?: boolean;\n  onClick?: () => void;\n  size?: ItemSize;\n}",
                    "signature": {
                      "properties": [
                        {
                          "key": "destructive",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "onClick",
                          "value": {
                            "name": "signature",
                            "type": "function",
                            "raw": "() => void",
                            "signature": {
                              "arguments": [],
                              "return": {
                                "name": "void"
                              }
                            },
                            "required": false
                          }
                        },
                        {
                          "key": "size",
                          "value": {
                            "name": "ItemSize",
                            "required": false
                          }
                        }
                      ]
                    }
                  }
                ]
              }
            ],
            "raw": "MenuItemProps[]"
          },
          "description": "Array of menu items to be rendered in the menu.\nEach item can be either a regular menu item or a separator."
        },
        "size": {
          "required": false,
          "tsType": {
            "name": "ItemSize"
          },
          "description": "Size variant for the menu items.\n@default 'medium'",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          }
        },
        "placement": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "Placement | undefined",
            "elements": [
              {
                "name": "Placement"
              },
              {
                "name": "undefined"
              }
            ]
          },
          "description": "The preferred placement of the menu relative to its trigger element.\nUses Floating UI placement options.\n@default 'bottom-end'",
          "defaultValue": {
            "value": "'bottom-end'",
            "computed": false
          }
        },
        "children": {
          "required": true,
          "tsType": {
            "name": "ReactElement"
          },
          "description": "The trigger element that will open the menu when clicked.\nThis element will be wrapped in a button with appropriate ARIA attributes."
        }
      }
    }
  ],
<<<<<<< HEAD
  "../ui/src/components/input/input.tsx": [
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
  "../ui/src/components/input/input.tsx": [
=======
  "../ui/src/components/menu/menu-item.tsx": [
>>>>>>> 1d274a5 (add react flow styles to shadow dom)
=======
  "../ui/src/components/input/input.tsx": [
>>>>>>> fb3ca13 (Clean up)
>>>>>>> 20599a2 (Add node doc)
    {
      "description": "",
      "methods": [],
      "displayName": "Input",
      "props": {
        "size": {
          "required": false,
          "tsType": {
            "name": "ItemSize"
          },
          "description": "Specifies the size of the input field.\nCan be 'small', 'medium', or 'large'.",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          }
<<<<<<< HEAD
        },
        "endAdornment": {
          "required": false,
          "tsType": {
            "name": "ReactNode"
          },
          "description": "Element displayed at the end of the input field.",
          "defaultValue": {
            "value": "undefined",
            "computed": true
          }
        },
        "startAdornment": {
          "required": false,
          "tsType": {
            "name": "ReactNode"
          },
          "description": "Element displayed at the start of the input field.",
          "defaultValue": {
            "value": "undefined",
            "computed": true
          }
=======
>>>>>>> 20599a2 (Add node doc)
        }
      }
    }
  ],
<<<<<<< HEAD
=======
<<<<<<< HEAD
=======
>>>>>>> 9e5369e (Add decision log listing)
=======
>>>>>>> f70719d (Add doc-extract plugin)
=======
>>>>>>> 00200e7 (Create docs for NodePanel)
=======
>>>>>>> 33c0d3e (Fix eslint setup)
  "../ui/src/components/menu/menu.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Menu",
      "props": {
        "items": {
          "required": true,
          "tsType": {
            "name": "Array",
            "elements": [
              {
                "name": "intersection",
                "raw": "ListItem & {\n  destructive?: boolean;\n  onClick?: () => void;\n  size?: ItemSize;\n}",
                "elements": [
                  {
                    "name": "ListItem"
                  },
                  {
                    "name": "signature",
                    "type": "object",
                    "raw": "{\n  destructive?: boolean;\n  onClick?: () => void;\n  size?: ItemSize;\n}",
                    "signature": {
                      "properties": [
                        {
                          "key": "destructive",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "onClick",
                          "value": {
                            "name": "signature",
                            "type": "function",
                            "raw": "() => void",
                            "signature": {
                              "arguments": [],
                              "return": {
                                "name": "void"
                              }
                            },
                            "required": false
                          }
                        },
                        {
                          "key": "size",
                          "value": {
                            "name": "ItemSize",
                            "required": false
                          }
                        }
                      ]
                    }
                  }
                ]
              }
            ],
            "raw": "MenuItemProps[]"
          },
          "description": "Array of menu items to be rendered in the menu.\nEach item can be either a regular menu item or a separator."
        },
        "size": {
=======
  "../ui/src/components/date-picker/date-picker.tsx": [
    {
      "description": "Component for selecting a date with customizable format and placeholder",
      "methods": [],
      "displayName": "DatePicker",
      "props": {
        "inputSize": {
>>>>>>> fb3ca13 (Clean up)
          "required": false,
          "tsType": {
            "name": "ItemSize"
          },
<<<<<<< HEAD
          "description": "Size variant for the menu items.\n@default 'medium'",
=======
          "description": "",
>>>>>>> fb3ca13 (Clean up)
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          }
        },
<<<<<<< HEAD
        "placement": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "Placement | undefined",
            "elements": [
              {
                "name": "Placement"
              },
              {
                "name": "undefined"
              }
            ]
          },
          "description": "The preferred placement of the menu relative to its trigger element.\nUses Floating UI placement options.\n@default 'bottom-end'",
          "defaultValue": {
            "value": "'bottom-end'",
            "computed": false
          }
        },
        "children": {
          "required": true,
          "tsType": {
            "name": "ReactElement"
          },
          "description": "The trigger element that will open the menu when clicked.\nThis element will be wrapped in a button with appropriate ARIA attributes."
=======
        "valueFormat": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Format string to control how the selected date is displayed\n(e.g., 'yyyy-MM-dd')",
          "defaultValue": {
            "value": "'DD/MM/YYYY'",
            "computed": false
          }
        },
        "placeholder": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Placeholder text to show when no date is selected",
          "defaultValue": {
            "value": "'dd/mm/yyyy'",
            "computed": false
          }
        },
        "type": {
          "required": false,
          "tsType": {
            "name": "DatePickerType"
          },
          "description": "Picker type",
          "defaultValue": {
            "value": "'default'",
            "computed": false
          }
        },
        "defaultValue": {
          "required": false,
          "tsType": {
            "name": "intersection['defaultValue']",
            "raw": "DatePickerProps['defaultValue']"
          },
          "description": "Default date value when the component is initially rendered.\n\nFor the \"default\" is a single date, for the \"range\" [date, date]; and for the \"multiple\", an array of dates."
        },
        "value": {
          "required": false,
          "tsType": {
            "name": "intersection['value']",
            "raw": "DatePickerProps['value']"
          },
          "description": "Controlled value for the selected date\n\nFor the \"default\" is a single date, for the \"range\" [date, date]; and for the \"multiple\", an array of dates."
>>>>>>> fb3ca13 (Clean up)
        }
      }
    }
  ],
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> 1f20cdb (Fix decision log listing generation)
=======
>>>>>>> fb3ca13 (Clean up)
=======
>>>>>>> 89cf5f0 (Fix node handle sizing)
>>>>>>> 20599a2 (Add node doc)
  "../ui/src/components/modal/modal.tsx": [
    {
      "description": "A modal dialog component that appears on top of the main content,",
      "methods": [],
      "displayName": "Modal",
      "props": {
        "title": {
          "required": true,
          "tsType": {
            "name": "string"
          },
          "description": "Title displayed in the modal header"
        },
        "subtitle": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Optional subtitle displayed below the title"
        },
        "children": {
          "required": false,
          "tsType": {
            "name": "ReactNode"
          },
          "description": "Content to be displayed in the modal body"
        },
        "footer": {
          "required": false,
          "tsType": {
            "name": "ReactNode"
          },
          "description": "Content to be displayed in the modal footer"
        },
        "size": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "'regular' | 'large'",
            "elements": [
              {
                "name": "literal",
                "value": "'regular'"
              },
              {
                "name": "literal",
                "value": "'large'"
              }
            ]
          },
          "description": "Size variant of the modal",
          "defaultValue": {
            "value": "'regular'",
            "computed": false
          }
        },
        "footerVariant": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "'integrated' | 'separated'",
            "elements": [
              {
                "name": "literal",
                "value": "'integrated'"
              },
              {
                "name": "literal",
                "value": "'separated'"
              }
            ]
          },
          "description": "Variant of the footer styling",
          "defaultValue": {
            "value": "'integrated'",
            "computed": false
          }
        },
        "open": {
          "required": true,
          "tsType": {
            "name": "boolean"
          },
          "description": "Controls the visibility of the modal"
        },
        "onClose": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => void",
            "signature": {
              "arguments": [],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "Callback function called when the modal is closed"
        }
      }
    }
  ],
<<<<<<< HEAD
  "../ui/src/components/select/select.tsx": [
    {
      "description": "Component for displaying a select dropdown with customizable size, placeholder, and item list",
      "methods": [],
      "displayName": "Select",
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
  "../ui/src/components/date-picker/date-picker.tsx": [
    {
      "description": "Component for selecting a date with customizable format and placeholder",
      "methods": [],
      "displayName": "DatePicker",
      "props": {
        "inputSize": {
          "required": false,
          "tsType": {
            "name": "ItemSize"
          },
          "description": "",
=======
  "../ui/src/components/checkbox/checkbox.tsx": [
    {
      "description": "A customizable checkbox component that supports three states: checked, unchecked, and indeterminate. It can be used in forms or as a standalone control.",
      "methods": [],
      "displayName": "Checkbox",
=======
  "../ui/src/components/input/input.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Input",
>>>>>>> 89cf5f0 (Fix node handle sizing)
>>>>>>> 20599a2 (Add node doc)
      "props": {
        "size": {
          "required": false,
          "tsType": {
<<<<<<< HEAD
            "name": "Extract",
            "elements": [
              {
                "name": "unknown[number]",
                "raw": "(typeof SIZES)[number]"
              },
              {
                "name": "union",
                "raw": "'large' | 'medium' | 'small'",
                "elements": [
                  {
                    "name": "literal",
                    "value": "'large'"
                  },
                  {
                    "name": "literal",
                    "value": "'medium'"
                  },
                  {
                    "name": "literal",
                    "value": "'small'"
                  }
                ]
              }
            ],
            "raw": "Extract<Size, 'large' | 'medium' | 'small'>"
          },
          "description": "Size of the select input",
=======
            "name": "ItemSize"
          },
<<<<<<< HEAD
          "description": "The size of the checkbox",
>>>>>>> 1f20cdb (Fix decision log listing generation)
=======
          "description": "Specifies the size of the input field.\nCan be 'small', 'medium', or 'large'.",
>>>>>>> 89cf5f0 (Fix node handle sizing)
>>>>>>> 20599a2 (Add node doc)
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          }
<<<<<<< HEAD
=======
<<<<<<< HEAD
        },
<<<<<<< HEAD
        "valueFormat": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Format string to control how the selected date is displayed\n(e.g., 'yyyy-MM-dd')",
          "defaultValue": {
            "value": "'DD/MM/YYYY'",
            "computed": false
          }
>>>>>>> 20599a2 (Add node doc)
        },
        "placeholder": {
          "required": false,
          "tsType": {
            "name": "string"
          },
<<<<<<< HEAD
          "description": "Placeholder text for the select input"
        },
        "items": {
          "required": true,
          "tsType": {
            "name": "Array",
            "elements": [
              {
                "name": "intersection",
                "raw": "ListItem & {\n  value?: string | number | null;\n  label?: string;\n}",
                "elements": [
                  {
                    "name": "intersection",
                    "raw": "Partial<WithIcon> & {\n  type?: 'item' | 'separator';\n  label?: string;\n  disabled?: boolean;\n}",
                    "elements": [
                      {
                        "name": "Partial",
                        "elements": [
                          {
                            "name": "signature",
                            "type": "object",
                            "raw": "{\n  /**\n   * Icon content React Node\n   */\n  icon?: React.ReactNode;\n}",
                            "signature": {
                              "properties": [
                                {
                                  "key": "icon",
                                  "value": {
                                    "name": "ReactReactNode",
                                    "raw": "React.ReactNode",
                                    "required": false
                                  },
                                  "description": "Icon content React Node"
                                }
                              ]
                            }
                          }
                        ],
                        "raw": "Partial<WithIcon>"
                      },
                      {
                        "name": "signature",
                        "type": "object",
                        "raw": "{\n  type?: 'item' | 'separator';\n  label?: string;\n  disabled?: boolean;\n}",
                        "signature": {
                          "properties": [
                            {
                              "key": "type",
                              "value": {
                                "name": "union",
                                "raw": "'item' | 'separator'",
                                "elements": [
                                  {
                                    "name": "literal",
                                    "value": "'item'"
                                  },
                                  {
                                    "name": "literal",
                                    "value": "'separator'"
                                  }
                                ],
                                "required": false
                              }
                            },
                            {
                              "key": "label",
                              "value": {
                                "name": "string",
                                "required": false
                              }
                            },
                            {
                              "key": "disabled",
                              "value": {
                                "name": "boolean",
                                "required": false
                              }
                            }
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "name": "signature",
                    "type": "object",
                    "raw": "{\n  value?: string | number | null;\n  label?: string;\n}",
                    "signature": {
                      "properties": [
                        {
                          "key": "value",
                          "value": {
                            "name": "union",
                            "raw": "string | number | null",
                            "elements": [
                              {
                                "name": "string"
                              },
                              {
                                "name": "number"
                              },
                              {
                                "name": "null"
                              }
                            ],
                            "required": false
                          }
                        },
                        {
                          "key": "label",
                          "value": {
                            "name": "string",
                            "required": false
                          }
                        }
                      ]
                    }
                  }
                ]
              }
            ],
            "raw": "SelectItem[]"
          },
          "description": "List of items to display in the select dropdown"
=======
          "description": "Placeholder text to show when no date is selected",
          "defaultValue": {
            "value": "'dd/mm/yyyy'",
            "computed": false
          }
        },
        "type": {
          "required": false,
          "tsType": {
            "name": "DatePickerType"
          },
          "description": "Picker type",
          "defaultValue": {
            "value": "'default'",
            "computed": false
          }
        },
        "defaultValue": {
          "required": false,
          "tsType": {
            "name": "intersection['defaultValue']",
            "raw": "DatePickerProps['defaultValue']"
          },
          "description": "Default date value when the component is initially rendered.\n\nFor the \"default\" is a single date, for the \"range\" [date, date]; and for the \"multiple\", an array of dates."
        },
        "value": {
          "required": false,
          "tsType": {
            "name": "intersection['value']",
            "raw": "DatePickerProps['value']"
          },
          "description": "Controlled value for the selected date\n\nFor the \"default\" is a single date, for the \"range\" [date, date]; and for the \"multiple\", an array of dates."
=======
>>>>>>> 89cf5f0 (Fix node handle sizing)
>>>>>>> 20599a2 (Add node doc)
        }
      }
    }
  ],
<<<<<<< HEAD
  "../ui/src/components/radio-button/radio.tsx": [
    {
      "description": "A radio button component that allows users to select a single option from a group.",
      "methods": [],
      "displayName": "Radio",
      "props": {
        "size": {
          "required": false,
          "tsType": {
            "name": "SelectorSize"
          },
          "description": "The size of the radio button",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          }
        },
        "checked": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Whether the radio button is checked"
        },
        "name": {
=======
<<<<<<< HEAD
  "../ui/src/components/accordion/accordion.tsx": [
    {
      "description": "An interactive UI component that lets users toggle the visibility of content.\nThe content section can be expanded to reveal details and collapsed to hide them,\nkeeping information organized and saving space. Commonly used in FAQs, settings panels,\nand documentation to present layered content efficiently.",
      "methods": [],
      "displayName": "Accordion",
      "props": {
        "icon": {
          "required": false,
          "tsType": {
            "name": "ReactReactNode",
            "raw": "React.ReactNode"
          },
          "description": "Icon content React Node"
        },
        "label": {
>>>>>>> 20599a2 (Add node doc)
          "required": true,
          "tsType": {
            "name": "string"
          },
<<<<<<< HEAD
          "description": "The name of the radio button group"
        },
        "value": {
          "required": true,
          "tsType": {
            "name": "union",
            "raw": "string | number",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "description": "The value of the radio button"
        },
        "onChange": {
=======
          "description": "Text displayed in the header"
        },
        "children": {
          "required": true,
          "tsType": {
            "name": "ReactReactNode",
            "raw": "React.ReactNode"
          },
          "description": "Contents of the collapsible section"
        },
        "isOpen": {
=======
        "indeterminate": {
>>>>>>> 1f20cdb (Fix decision log listing generation)
          "required": false,
          "tsType": {
            "name": "boolean"
          },
<<<<<<< HEAD
          "description": "True if not collapsed"
        },
        "onToggleOpen": {
>>>>>>> 20599a2 (Add node doc)
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
<<<<<<< HEAD
            "raw": "(event: React.ChangeEvent<HTMLInputElement>) => void",
=======
            "raw": "(isOpen: boolean) => void",
>>>>>>> 20599a2 (Add node doc)
            "signature": {
              "arguments": [
                {
                  "type": {
<<<<<<< HEAD
                    "name": "ReactChangeEvent",
                    "raw": "React.ChangeEvent<HTMLInputElement>",
                    "elements": [
                      {
                        "name": "HTMLInputElement"
                      }
                    ]
                  },
                  "name": "event"
=======
                    "name": "boolean"
                  },
                  "name": "isOpen"
>>>>>>> 20599a2 (Add node doc)
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
<<<<<<< HEAD
          "description": "Callback fired when the radio button state changes"
        }
      }
    }
  ],
  "../ui/src/components/snackbar/snackbar.tsx": [
    {
      "description": "A Snackbar component that displays brief messages about app processes.\nThe snackbar appears at the bottom of the screen and automatically disappears after a few seconds.",
      "methods": [],
      "displayName": "Snackbar",
      "props": {
        "variant": {
          "required": true,
          "tsType": {
            "name": "literal",
            "value": "`${SnackbarType}`"
          },
          "description": "Visual style variant of the snackbar"
        },
        "title": {
          "required": true,
          "tsType": {
            "name": "string"
          },
          "description": "Main message displayed in the snackbar"
        },
        "subtitle": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Optional secondary message displayed below the title"
        },
        "buttonLabel": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Label for the action button"
        },
        "onButtonClick": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => void",
            "signature": {
              "arguments": [],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "Callback fired when the action button is clicked"
        },
        "close": {
=======
          "description": "Callback run when the open state changes"
        },
        "defaultOpen": {
=======
          "description": "Whether the checkbox is in an indeterminate state"
        },
        "checked": {
>>>>>>> 1f20cdb (Fix decision log listing generation)
>>>>>>> 20599a2 (Add node doc)
          "required": false,
          "tsType": {
            "name": "boolean"
          },
<<<<<<< HEAD
          "description": "Whether to show the close button",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "onClose": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => void",
            "signature": {
              "arguments": [],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "Callback fired when the snackbar is closed"
=======
<<<<<<< HEAD
          "description": "Initial open state",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
=======
          "description": "Whether the checkbox is checked"
>>>>>>> 1f20cdb (Fix decision log listing generation)
>>>>>>> 20599a2 (Add node doc)
        }
      }
    }
  ],
<<<<<<< HEAD
  "../ui/src/components/separator/separator.tsx": [
    {
      "description": "A visual separator component that creates a horizontal line to divide content.",
      "methods": [],
      "displayName": "Separator"
    }
  ],
  "../ui/src/components/switch/switch.tsx": [
    {
      "description": "A Switch component that allows users to toggle between two states, such as on and off.\nTypically used for settings or preferences, it provides immediate visual feedback.",
=======
<<<<<<< HEAD
>>>>>>> 9e5369e (Add decision log listing)
=======
>>>>>>> f70719d (Add doc-extract plugin)
=======
>>>>>>> 33c0d3e (Fix eslint setup)
=======
>>>>>>> 1f20cdb (Fix decision log listing generation)
=======
>>>>>>> fb3ca13 (Clean up)
  "../ui/src/components/radio-button/radio.tsx": [
    {
      "description": "A radio button component that allows users to select a single option from a group.",
      "methods": [],
      "displayName": "Radio",
=======
  "../ui/src/components/switch/switch.tsx": [
    {
      "description": "A Switch component that allows users to toggle between two states, such as on and off.\nTypically used for settings or preferences, it provides immediate visual feedback.",
      "methods": [],
      "displayName": "Switch",
>>>>>>> 1d274a5 (add react flow styles to shadow dom)
=======
  "../ui/src/components/radio-button/radio.tsx": [
    {
      "description": "A radio button component that allows users to select a single option from a group.",
      "methods": [],
      "displayName": "Radio",
>>>>>>> dcde824 (fix props and desc not displaying)
      "props": {
        "size": {
          "required": false,
          "tsType": {
            "name": "SelectorSize"
          },
<<<<<<< HEAD
<<<<<<< HEAD
          "description": "The size of the radio button",
=======
          "description": "Size of the switch component",
>>>>>>> 1d274a5 (add react flow styles to shadow dom)
=======
          "description": "The size of the radio button",
>>>>>>> dcde824 (fix props and desc not displaying)
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          }
        },
<<<<<<< HEAD
<<<<<<< HEAD
=======
        "styles": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Custom styles to apply to the switch"
        },
        "thumbChildren": {
          "required": false,
          "tsType": {
            "name": "ReactReactNode",
            "raw": "React.ReactNode"
          },
          "description": "Custom content for the thumb of the switch"
        },
        "trackChildren": {
          "required": false,
          "tsType": {
            "name": "ReactReactNode",
            "raw": "React.ReactNode"
          },
          "description": "Custom content for the track of the switch"
        },
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Custom class name for the switch component"
        },
>>>>>>> 1d274a5 (add react flow styles to shadow dom)
=======
>>>>>>> dcde824 (fix props and desc not displaying)
        "checked": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
<<<<<<< HEAD
<<<<<<< HEAD
          "description": "Whether the radio button is checked"
        },
        "name": {
=======
  "../ui/src/components/avatar/avatar.tsx": [
    {
      "description": "Component for displaying user avatars with various sizes",
      "methods": [],
      "displayName": "Avatar",
      "props": {
        "username": {
>>>>>>> 89cf5f0 (Fix node handle sizing)
          "required": true,
          "tsType": {
            "name": "string"
          },
          "description": "Provide to use it as alt of the image for better a11y"
        },
        "imageUrl": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Image URL"
        },
        "size": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "'extra-large' | 'large' | 'medium' | 'small'",
            "elements": [
              {
                "name": "literal",
                "value": "'extra-large'"
              },
              {
                "name": "literal",
                "value": "'large'"
              },
              {
                "name": "literal",
                "value": "'medium'"
              },
              {
                "name": "literal",
                "value": "'small'"
              }
            ]
          },
<<<<<<< HEAD
          "description": "The value of the radio button"
=======
          "description": "Whether the switch is checked or not"
=======
          "description": "Whether the radio button is checked"
>>>>>>> dcde824 (fix props and desc not displaying)
        },
        "name": {
          "required": true,
          "tsType": {
            "name": "string"
          },
<<<<<<< HEAD
          "description": "Whether the switch is disabled"
>>>>>>> 1d274a5 (add react flow styles to shadow dom)
=======
          "description": "The name of the radio button group"
        },
        "value": {
          "required": true,
          "tsType": {
            "name": "union",
            "raw": "string | number",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "description": "The value of the radio button"
>>>>>>> dcde824 (fix props and desc not displaying)
        },
        "onChange": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
<<<<<<< HEAD
<<<<<<< HEAD
            "raw": "(event: React.ChangeEvent<HTMLInputElement>) => void",
=======
            "raw": "(checked: boolean, event: ChangeEvent<HTMLInputElement>) => void",
>>>>>>> 1d274a5 (add react flow styles to shadow dom)
=======
            "raw": "(event: React.ChangeEvent<HTMLInputElement>) => void",
>>>>>>> dcde824 (fix props and desc not displaying)
            "signature": {
              "arguments": [
                {
                  "type": {
<<<<<<< HEAD
<<<<<<< HEAD
                    "name": "ReactChangeEvent",
                    "raw": "React.ChangeEvent<HTMLInputElement>",
=======
                    "name": "boolean"
                  },
                  "name": "checked"
                },
                {
                  "type": {
                    "name": "ChangeEvent",
>>>>>>> 1d274a5 (add react flow styles to shadow dom)
=======
                    "name": "ReactChangeEvent",
                    "raw": "React.ChangeEvent<HTMLInputElement>",
>>>>>>> dcde824 (fix props and desc not displaying)
                    "elements": [
                      {
                        "name": "HTMLInputElement"
                      }
<<<<<<< HEAD
<<<<<<< HEAD
                    ]
=======
                    ],
                    "raw": "ChangeEvent<HTMLInputElement>"
>>>>>>> 1d274a5 (add react flow styles to shadow dom)
=======
                    ]
>>>>>>> dcde824 (fix props and desc not displaying)
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
<<<<<<< HEAD
<<<<<<< HEAD
          "description": "Callback fired when the radio button state changes"
=======
          "description": "Callback function when the switch state changes"
=======
          "description": "Callback fired when the radio button state changes"
>>>>>>> dcde824 (fix props and desc not displaying)
        }
      }
    }
  ],
<<<<<<< HEAD
  "../ui/src/components/snackbar/snackbar.tsx": [
    {
      "description": "A Snackbar component that displays brief messages about app processes.\nThe snackbar appears at the bottom of the screen and automatically disappears after a few seconds.",
      "methods": [],
      "displayName": "Snackbar",
      "props": {
        "variant": {
          "required": true,
          "tsType": {
            "name": "literal",
            "value": "`${SnackbarType}`"
          },
          "description": "Visual style variant of the snackbar"
        },
        "title": {
          "required": true,
          "tsType": {
            "name": "string"
          },
          "description": "Main message displayed in the snackbar"
        },
        "subtitle": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Optional secondary message displayed below the title"
        },
        "buttonLabel": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Label for the action button"
        },
        "onButtonClick": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => void",
            "signature": {
              "arguments": [],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "Callback fired when the action button is clicked"
        },
        "close": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Whether to show the close button",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "onClose": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => void",
            "signature": {
              "arguments": [],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "Callback fired when the snackbar is closed"
>>>>>>> 1d274a5 (add react flow styles to shadow dom)
=======
          "description": "Size of the circle container",
          "defaultValue": {
            "value": "'extra-large'",
            "computed": false
          }
>>>>>>> 89cf5f0 (Fix node handle sizing)
        }
      }
    }
  ],
  "../ui/src/components/select/select.tsx": [
    {
      "description": "Component for displaying a select dropdown with customizable size, placeholder, and item list",
      "methods": [],
      "displayName": "Select",
      "props": {
=======
  "../ui/src/components/select/select.tsx": [
    {
      "description": "Component for displaying a select dropdown with customizable size, placeholder, and item list",
      "methods": [],
      "displayName": "Select",
      "props": {
>>>>>>> dcde824 (fix props and desc not displaying)
        "size": {
          "required": false,
          "tsType": {
            "name": "Extract",
            "elements": [
              {
                "name": "unknown[number]",
                "raw": "(typeof SIZES)[number]"
              },
              {
                "name": "union",
                "raw": "'large' | 'medium' | 'small'",
                "elements": [
                  {
                    "name": "literal",
                    "value": "'large'"
                  },
                  {
                    "name": "literal",
                    "value": "'medium'"
                  },
                  {
                    "name": "literal",
                    "value": "'small'"
                  }
                ]
              }
            ],
            "raw": "Extract<Size, 'large' | 'medium' | 'small'>"
          },
          "description": "Size of the select input",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          }
        },
        "placeholder": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Placeholder text for the select input"
        },
        "items": {
          "required": true,
          "tsType": {
            "name": "Array",
            "elements": [
              {
                "name": "intersection",
                "raw": "ListItem & {\n  value?: string | number | null;\n  label?: string;\n}",
                "elements": [
                  {
                    "name": "intersection",
                    "raw": "Partial<WithIcon> & {\n  type?: 'item' | 'separator';\n  label?: string;\n  disabled?: boolean;\n}",
                    "elements": [
                      {
                        "name": "Partial",
                        "elements": [
                          {
                            "name": "signature",
                            "type": "object",
                            "raw": "{\n  /**\n   * Icon content React Node\n   */\n  icon?: React.ReactNode;\n}",
                            "signature": {
                              "properties": [
                                {
                                  "key": "icon",
                                  "value": {
                                    "name": "ReactReactNode",
                                    "raw": "React.ReactNode",
                                    "required": false
                                  },
                                  "description": "Icon content React Node"
                                }
                              ]
                            }
                          }
                        ],
                        "raw": "Partial<WithIcon>"
                      },
                      {
                        "name": "signature",
                        "type": "object",
                        "raw": "{\n  type?: 'item' | 'separator';\n  label?: string;\n  disabled?: boolean;\n}",
                        "signature": {
                          "properties": [
                            {
                              "key": "type",
                              "value": {
                                "name": "union",
                                "raw": "'item' | 'separator'",
                                "elements": [
                                  {
                                    "name": "literal",
                                    "value": "'item'"
                                  },
                                  {
                                    "name": "literal",
                                    "value": "'separator'"
                                  }
                                ],
                                "required": false
                              }
                            },
                            {
                              "key": "label",
                              "value": {
                                "name": "string",
                                "required": false
                              }
                            },
                            {
                              "key": "disabled",
                              "value": {
                                "name": "boolean",
                                "required": false
                              }
                            }
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "name": "signature",
                    "type": "object",
                    "raw": "{\n  value?: string | number | null;\n  label?: string;\n}",
                    "signature": {
                      "properties": [
                        {
                          "key": "value",
                          "value": {
                            "name": "union",
                            "raw": "string | number | null",
                            "elements": [
                              {
                                "name": "string"
                              },
                              {
                                "name": "number"
                              },
                              {
                                "name": "null"
                              }
                            ],
                            "required": false
                          }
                        },
                        {
                          "key": "label",
                          "value": {
                            "name": "string",
                            "required": false
                          }
                        }
                      ]
                    }
                  }
                ]
              }
            ],
            "raw": "SelectItem[]"
          },
          "description": "List of items to display in the select dropdown"
<<<<<<< HEAD
        }
      }
    }
  ],
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
  "../ui/src/components/snackbar/snackbar.tsx": [
    {
      "description": "A Snackbar component that displays brief messages about app processes.\nThe snackbar appears at the bottom of the screen and automatically disappears after a few seconds.",
      "methods": [],
      "displayName": "Snackbar",
=======
  "../ui/src/components/switch/switch.tsx": [
    {
      "description": "A Switch component that allows users to toggle between two states, such as on and off.\nTypically used for settings or preferences, it provides immediate visual feedback.",
      "methods": [],
      "displayName": "Switch",
>>>>>>> 00200e7 (Create docs for NodePanel)
=======
  "../ui/src/components/radio-button/radio.tsx": [
    {
      "description": "A radio button component that allows users to select a single option from a group.",
      "methods": [],
      "displayName": "Radio",
>>>>>>> 89cf5f0 (Fix node handle sizing)
      "props": {
        "size": {
          "required": false,
          "tsType": {
            "name": "SelectorSize"
          },
<<<<<<< HEAD
          "description": "Size of the switch component",
=======
          "description": "The size of the radio button",
>>>>>>> 89cf5f0 (Fix node handle sizing)
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          }
        },
<<<<<<< HEAD
        "styles": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Custom styles to apply to the switch"
        },
        "thumbChildren": {
          "required": false,
          "tsType": {
            "name": "ReactReactNode",
            "raw": "React.ReactNode"
          },
          "description": "Custom content for the thumb of the switch"
        },
        "trackChildren": {
          "required": false,
          "tsType": {
            "name": "ReactReactNode",
            "raw": "React.ReactNode"
          },
          "description": "Custom content for the track of the switch"
        },
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Custom class name for the switch component"
        },
=======
>>>>>>> 89cf5f0 (Fix node handle sizing)
        "checked": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
<<<<<<< HEAD
          "description": "Whether the switch is checked or not"
        },
        "disabled": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Whether the switch is disabled"
=======
          "description": "Whether the radio button is checked"
        },
        "name": {
          "required": true,
          "tsType": {
            "name": "string"
          },
          "description": "The name of the radio button group"
        },
        "value": {
          "required": true,
          "tsType": {
            "name": "union",
            "raw": "string | number",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "description": "The value of the radio button"
>>>>>>> 89cf5f0 (Fix node handle sizing)
        },
        "onChange": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
<<<<<<< HEAD
            "raw": "(checked: boolean, event: ChangeEvent<HTMLInputElement>) => void",
=======
            "raw": "(event: React.ChangeEvent<HTMLInputElement>) => void",
>>>>>>> 89cf5f0 (Fix node handle sizing)
            "signature": {
              "arguments": [
                {
                  "type": {
<<<<<<< HEAD
                    "name": "boolean"
                  },
                  "name": "checked"
                },
                {
                  "type": {
                    "name": "ChangeEvent",
=======
                    "name": "ReactChangeEvent",
                    "raw": "React.ChangeEvent<HTMLInputElement>",
>>>>>>> 89cf5f0 (Fix node handle sizing)
                    "elements": [
                      {
                        "name": "HTMLInputElement"
                      }
<<<<<<< HEAD
                    ],
                    "raw": "ChangeEvent<HTMLInputElement>"
=======
                    ]
>>>>>>> 89cf5f0 (Fix node handle sizing)
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
<<<<<<< HEAD
<<<<<<< HEAD
          "description": "Callback fired when the snackbar is closed"
=======
>>>>>>> dcde824 (fix props and desc not displaying)
=======
          "description": "Callback function when the switch state changes"
>>>>>>> 00200e7 (Create docs for NodePanel)
=======
          "description": "Callback fired when the radio button state changes"
>>>>>>> 89cf5f0 (Fix node handle sizing)
        }
      }
    }
  ],
<<<<<<< HEAD
=======
>>>>>>> 1add3c9 (Add remaining node components)
=======
>>>>>>> fb3ca13 (Clean up)
=======
>>>>>>> 89cf5f0 (Fix node handle sizing)
  "../ui/src/components/separator/separator.tsx": [
    {
      "description": "A visual separator component that creates a horizontal line to divide content.",
      "methods": [],
      "displayName": "Separator"
    }
  ],
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
=======
  "../ui/src/components/modal/modal.tsx": [
    {
      "description": "A modal dialog component that appears on top of the main content,",
      "methods": [],
      "displayName": "Modal",
      "props": {
        "title": {
          "required": true,
          "tsType": {
            "name": "string"
          },
          "description": "Title displayed in the modal header"
        },
        "subtitle": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Optional subtitle displayed below the title"
        },
        "children": {
          "required": false,
          "tsType": {
            "name": "ReactNode"
          },
          "description": "Content to be displayed in the modal body"
        },
        "footer": {
          "required": false,
          "tsType": {
            "name": "ReactNode"
          },
          "description": "Content to be displayed in the modal footer"
        },
        "size": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "'regular' | 'large'",
            "elements": [
              {
                "name": "literal",
                "value": "'regular'"
              },
              {
                "name": "literal",
                "value": "'large'"
              }
            ]
          },
          "description": "Size variant of the modal",
          "defaultValue": {
            "value": "'regular'",
            "computed": false
          }
        },
        "footerVariant": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "'integrated' | 'separated'",
            "elements": [
              {
                "name": "literal",
                "value": "'integrated'"
              },
              {
                "name": "literal",
                "value": "'separated'"
              }
            ]
          },
          "description": "Variant of the footer styling",
          "defaultValue": {
            "value": "'integrated'",
            "computed": false
          }
        },
        "open": {
          "required": true,
          "tsType": {
            "name": "boolean"
          },
          "description": "Controls the visibility of the modal"
        },
        "onClose": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => void",
            "signature": {
              "arguments": [],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "Callback function called when the modal is closed"
        }
      }
    }
  ],
>>>>>>> 33c0d3e (Fix eslint setup)
=======
>>>>>>> 1f20cdb (Fix decision log listing generation)
=======
>>>>>>> fb3ca13 (Clean up)
  "../ui/src/components/snackbar/snackbar.tsx": [
    {
      "description": "A Snackbar component that displays brief messages about app processes.\nThe snackbar appears at the bottom of the screen and automatically disappears after a few seconds.",
      "methods": [],
      "displayName": "Snackbar",
      "props": {
        "variant": {
          "required": true,
          "tsType": {
            "name": "literal",
            "value": "`${SnackbarType}`"
          },
          "description": "Visual style variant of the snackbar"
        },
        "title": {
          "required": true,
          "tsType": {
            "name": "string"
          },
          "description": "Main message displayed in the snackbar"
        },
        "subtitle": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Optional secondary message displayed below the title"
        },
        "buttonLabel": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Label for the action button"
        },
        "onButtonClick": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => void",
            "signature": {
              "arguments": [],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "Callback fired when the action button is clicked"
        },
        "close": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Whether to show the close button",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "onClose": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => void",
            "signature": {
              "arguments": [],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "Callback fired when the snackbar is closed"
        }
      }
    }
  ],
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> 1add3c9 (Add remaining node components)
=======
>>>>>>> 1f20cdb (Fix decision log listing generation)
  "../ui/src/components/switch/switch.tsx": [
    {
      "description": "A Switch component that allows users to toggle between two states, such as on and off.\nTypically used for settings or preferences, it provides immediate visual feedback.",
>>>>>>> 20599a2 (Add node doc)
      "methods": [],
      "displayName": "Switch",
      "props": {
        "size": {
          "required": false,
          "tsType": {
            "name": "SelectorSize"
          },
          "description": "Size of the switch component",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          }
        },
        "styles": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Custom styles to apply to the switch"
        },
        "thumbChildren": {
          "required": false,
          "tsType": {
            "name": "ReactReactNode",
            "raw": "React.ReactNode"
          },
          "description": "Custom content for the thumb of the switch"
        },
        "trackChildren": {
          "required": false,
          "tsType": {
            "name": "ReactReactNode",
            "raw": "React.ReactNode"
          },
          "description": "Custom content for the track of the switch"
        },
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Custom class name for the switch component"
        },
        "checked": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Whether the switch is checked or not"
        },
        "disabled": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Whether the switch is disabled"
        },
        "onChange": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(checked: boolean, event: ChangeEvent<HTMLInputElement>) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "boolean"
                  },
                  "name": "checked"
                },
                {
                  "type": {
                    "name": "ChangeEvent",
                    "elements": [
                      {
                        "name": "HTMLInputElement"
                      }
                    ],
                    "raw": "ChangeEvent<HTMLInputElement>"
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "Callback function when the switch state changes"
        }
      }
    }
  ],
<<<<<<< HEAD
=======
<<<<<<< HEAD
  "../ui/src/components/separator/separator.tsx": [
=======
  "../ui/src/components/snackbar/snackbar.tsx": [
>>>>>>> 9e5369e (Add decision log listing)
    {
      "description": "A visual separator component that creates a horizontal line to divide content.",
      "methods": [],
      "displayName": "Separator"
    }
  ],
<<<<<<< HEAD
  "../ui/src/components/avatar/avatar.tsx": [
    {
      "description": "Component for displaying user avatars with various sizes",
      "methods": [],
      "displayName": "Avatar",
      "props": {
        "username": {
          "required": true,
          "tsType": {
            "name": "string"
          },
          "description": "Provide to use it as alt of the image for better a11y"
        },
        "imageUrl": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Image URL"
        },
        "size": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "'extra-large' | 'large' | 'medium' | 'small'",
            "elements": [
              {
                "name": "literal",
                "value": "'extra-large'"
              },
              {
                "name": "literal",
                "value": "'large'"
              },
              {
                "name": "literal",
                "value": "'medium'"
              },
              {
                "name": "literal",
                "value": "'small'"
              }
            ]
          },
          "description": "Size of the circle container",
          "defaultValue": {
            "value": "'extra-large'",
=======
>>>>>>> 20599a2 (Add node doc)
  "../ui/src/components/tooltip/tooltip-content.tsx": [
    {
      "description": "Tooltips Content is the component that pops out when the tooltip is open.",
      "methods": [],
      "displayName": "TooltipContent",
      "props": {
        "tooltipType": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "'default' | 'blue'",
            "elements": [
              {
                "name": "literal",
                "value": "'default'"
              },
              {
                "name": "literal",
                "value": "'blue'"
              }
            ]
          },
          "description": "TooltipType determines the color type of the tooltip",
          "defaultValue": {
            "value": "'default'",
>>>>>>> 1d274a5 (add react flow styles to shadow dom)
            "computed": false
          }
        }
      }
    }
  ],
<<<<<<< HEAD
  "../ui/src/components/tooltip/tooltip-trigger.tsx": [
    {
      "description": "Tooltips trigger is the the element that toggles the tooltip",
      "methods": [],
      "displayName": "TooltipTrigger",
      "props": {
        "asChild": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "`asChild` allows the user to pass any element as the anchor",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        }
      }
    }
  ],
=======
=======
>>>>>>> dcde824 (fix props and desc not displaying)
=======
>>>>>>> 33c0d3e (Fix eslint setup)
=======
>>>>>>> 1f20cdb (Fix decision log listing generation)
>>>>>>> 20599a2 (Add node doc)
  "../ui/src/components/text-area/text-area.tsx": [
    {
      "description": "Component for displaying a textarea with customizable size, rows, and error state",
      "methods": [],
      "displayName": "TextArea",
      "props": {
        "value": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Controlled value of the textarea"
        },
        "defaultValue": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Initial value of the textarea"
        },
        "placeholder": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Placeholder text for the textarea"
        },
        "size": {
          "required": false,
          "tsType": {
            "name": "Extract",
            "elements": [
              {
                "name": "unknown[number]",
                "raw": "(typeof SIZES)[number]"
              },
              {
                "name": "union",
                "raw": "'large' | 'medium' | 'small'",
                "elements": [
                  {
                    "name": "literal",
                    "value": "'large'"
                  },
                  {
                    "name": "literal",
                    "value": "'medium'"
                  },
                  {
                    "name": "literal",
                    "value": "'small'"
                  }
                ]
              }
            ],
            "raw": "Extract<Size, 'large' | 'medium' | 'small'>"
          },
          "description": "Size of the textarea",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          }
        },
        "maxRows": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "Maximum number of rows the textarea can expand to"
        },
        "minRows": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "Minimum number of rows the textarea can expand to"
        },
        "disabled": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Whether the textarea is disabled"
        },
        "error": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Whether the textarea has an error"
        },
        "onChange": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.ChangeEvent<HTMLTextAreaElement>) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactChangeEvent",
                    "raw": "React.ChangeEvent<HTMLTextAreaElement>",
                    "elements": [
                      {
                        "name": "HTMLTextAreaElement"
                      }
                    ]
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "Callback function to handle change in textarea value"
        },
        "onBlur": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event?: React.FocusEvent) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactFocusEvent",
                    "raw": "React.FocusEvent"
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "Function called when the input loses focus.\nThe event parameter may be undefined."
        },
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Custom class name for the textarea"
        }
      }
    }
  ],
<<<<<<< HEAD
  "../ui/src/components/tooltip/tooltip.tsx": [
    {
      "description": "Tooltips display informative text when users hover over, focus on, or tap an element.",
      "methods": [],
      "displayName": "Tooltip",
      "props": {
        "children": {
          "required": true,
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
  "../ui/src/components/tooltip/tooltip-content.tsx": [
=======
  "../ui/src/components/separator/separator.tsx": [
=======
=======
  "../ui/src/components/switch/switch.tsx": [
=======
  "../ui/src/components/tooltip/tooltip-trigger.tsx": [
>>>>>>> 00200e7 (Create docs for NodePanel)
=======
  "../ui/src/components/tooltip/tooltip-trigger.tsx": [
>>>>>>> 89cf5f0 (Fix node handle sizing)
    {
      "description": "Tooltips trigger is the the element that toggles the tooltip",
      "methods": [],
      "displayName": "TooltipTrigger",
      "props": {
        "asChild": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "`asChild` allows the user to pass any element as the anchor",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        }
      }
    }
  ],
<<<<<<< HEAD
<<<<<<< HEAD
  "../ui/src/components/button/base-button/base-button.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "BaseButton",
      "props": {
        "tooltip": {
=======
  "../ui/src/components/switch/switch.tsx": [
=======
  "../ui/src/components/separator/separator.tsx": [
>>>>>>> 1f20cdb (Fix decision log listing generation)
    {
      "description": "A visual separator component that creates a horizontal line to divide content.",
      "methods": [],
<<<<<<< HEAD
      "displayName": "Switch",
      "props": {
        "size": {
          "required": false,
>>>>>>> 20599a2 (Add node doc)
          "tsType": {
            "name": "SelectorSize"
          },
<<<<<<< HEAD
          "description": "Tooltip reference element."
        },
        "initialOpen": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "If true, the component is shown at initial"
        },
        "placement": {
          "required": false,
          "tsType": {
            "name": "Placement"
          },
          "description": "Tooltip placement."
        },
        "open": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "If true, the component is shown."
        },
        "onOpenChange": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(open: boolean) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "boolean"
                  },
                  "name": "open"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "Callback fired when the component requests to be open."
=======
          "description": "Size of the switch component",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          }
        },
        "styles": {
>>>>>>> 33c0d3e (Fix eslint setup)
          "required": false,
          "tsType": {
            "name": "string"
          },
<<<<<<< HEAD
          "description": ""
        },
        "tooltipType": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "'default' | 'blue'",
            "elements": [
              {
                "name": "literal",
                "value": "'default'"
              },
              {
                "name": "literal",
                "value": "'blue'"
              }
            ]
          },
          "description": "",
          "defaultValue": {
            "value": "'default'",
            "computed": false
          }
        },
        "size": {
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          },
          "required": false
>>>>>>> 20599a2 (Add node doc)
        }
      }
    }
  ],
<<<<<<< HEAD
  "../ui/src/components/button/label-button/label-button.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "LabelButton",
      "props": {
        "tooltip": {
=======
  "../ui/src/components/tooltip/tooltip-trigger.tsx": [
    {
      "description": "Tooltips trigger is the the element that toggles the tooltip",
      "methods": [],
      "displayName": "TooltipTrigger",
      "props": {
        "asChild": {
=======
          "description": "Custom styles to apply to the switch"
        },
        "thumbChildren": {
          "required": false,
          "tsType": {
            "name": "ReactReactNode",
            "raw": "React.ReactNode"
          },
          "description": "Custom content for the thumb of the switch"
        },
        "trackChildren": {
          "required": false,
          "tsType": {
            "name": "ReactReactNode",
            "raw": "React.ReactNode"
          },
          "description": "Custom content for the track of the switch"
        },
        "className": {
>>>>>>> 20599a2 (Add node doc)
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Custom class name for the switch component"
        },
        "checked": {
>>>>>>> 33c0d3e (Fix eslint setup)
          "required": false,
          "tsType": {
            "name": "boolean"
          },
<<<<<<< HEAD
          "description": "`asChild` allows the user to pass any element as the anchor",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
=======
          "description": "Whether the switch is checked or not"
        },
        "disabled": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Whether the switch is disabled"
        },
        "onChange": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(checked: boolean, event: ChangeEvent<HTMLInputElement>) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "boolean"
                  },
                  "name": "checked"
                },
                {
                  "type": {
                    "name": "ChangeEvent",
                    "elements": [
                      {
                        "name": "HTMLInputElement"
                      }
                    ],
                    "raw": "ChangeEvent<HTMLInputElement>"
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "Callback function when the switch state changes"
>>>>>>> 33c0d3e (Fix eslint setup)
        }
      }
=======
      "displayName": "Separator"
>>>>>>> 1f20cdb (Fix decision log listing generation)
    }
  ],
<<<<<<< HEAD
>>>>>>> 9e5369e (Add decision log listing)
=======
>>>>>>> f70719d (Add doc-extract plugin)
=======
>>>>>>> 1add3c9 (Add remaining node components)
=======
>>>>>>> 33c0d3e (Fix eslint setup)
=======
>>>>>>> fb3ca13 (Clean up)
=======
>>>>>>> 89cf5f0 (Fix node handle sizing)
  "../ui/src/components/tooltip/tooltip-content.tsx": [
    {
      "description": "Tooltips Content is the component that pops out when the tooltip is open.",
      "methods": [],
      "displayName": "TooltipContent",
      "props": {
        "tooltipType": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "'default' | 'blue'",
            "elements": [
              {
                "name": "literal",
                "value": "'default'"
              },
              {
                "name": "literal",
                "value": "'blue'"
              }
            ]
          },
          "description": "TooltipType determines the color type of the tooltip",
          "defaultValue": {
            "value": "'default'",
            "computed": false
          }
        }
      }
    }
  ],
  "../ui/src/components/tooltip/tooltip.tsx": [
    {
      "description": "Tooltips display informative text when users hover over, focus on, or tap an element.",
      "methods": [],
      "displayName": "Tooltip",
      "props": {
        "children": {
          "required": true,
          "tsType": {
            "name": "ReactNode"
          },
          "description": "Tooltip reference element."
        },
        "initialOpen": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "If true, the component is shown at initial"
        },
        "placement": {
          "required": false,
          "tsType": {
            "name": "Placement"
          },
          "description": "Tooltip placement."
        },
        "open": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "If true, the component is shown."
        },
        "onOpenChange": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(open: boolean) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "boolean"
                  },
                  "name": "open"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "Callback fired when the component requests to be open."
        }
      }
    }
  ],
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
  "../ui/src/components/input/clear-button/clear-button.tsx": [
>>>>>>> dcde824 (fix props and desc not displaying)
    {
      "description": "A visual separator component that creates a horizontal line to divide content.",
      "methods": [],
<<<<<<< HEAD
      "displayName": "Separator"
    }
  ],
  "../ui/src/components/button/label-button/label-button.tsx": [
>>>>>>> 1d274a5 (add react flow styles to shadow dom)
    {
      "description": "Tooltips Content is the component that pops out when the tooltip is open.",
      "methods": [],
<<<<<<< HEAD
      "displayName": "TooltipContent",
      "props": {
=======
  "../ui/src/components/button/icon-label-button/icon-label-button.tsx": [
    {
      "description": "A flexible button component that allows only specific combinations of children:\n- Icon followed by text.\n- Text followed by an Icon.\n- Icon, text and another Icon.\n\nExamples:\n```tsx\n<IconLabelButton {...props} >\n  <PlusCircle />\n  Button\n</IconLabelButton>\n\n<Button {...props} >\n  Button\n  <PlusCircle />\n</Button>\n\n<Button {...props} >\n  <PlusCircle />\n  Button\n  <PlusCircle />\n</Button>\n```",
      "methods": [],
      "displayName": "IconLabelButton",
      "props": {
        "tooltip": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
<<<<<<< HEAD
=======
>>>>>>> 89cf5f0 (Fix node handle sizing)
>>>>>>> 20599a2 (Add node doc)
        "tooltipType": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "'default' | 'blue'",
            "elements": [
              {
                "name": "literal",
                "value": "'default'"
              },
              {
                "name": "literal",
                "value": "'blue'"
              }
            ]
<<<<<<< HEAD
=======
<<<<<<< HEAD
=======
      "displayName": "ClearButton",
      "props": {
        "onClick": {
          "required": true,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => void",
            "signature": {
              "arguments": [],
              "return": {
                "name": "void"
              }
            }
>>>>>>> dcde824 (fix props and desc not displaying)
          },
          "description": "TooltipType determines the color type of the tooltip",
          "defaultValue": {
            "value": "'default'",
            "computed": false
          }
        }
      }
    }
  ],
<<<<<<< HEAD
  "../ui/src/components/tooltip/tooltip-trigger.tsx": [
=======
  "../ui/src/components/button/icon-button/icon-button.tsx": [
>>>>>>> dcde824 (fix props and desc not displaying)
    {
      "description": "Tooltips trigger is the the element that toggles the tooltip",
      "methods": [],
<<<<<<< HEAD
      "displayName": "TooltipTrigger",
=======
      "displayName": "LabelButton",
>>>>>>> 1d274a5 (add react flow styles to shadow dom)
=======
  "../ui/src/components/tooltip/tooltip-trigger.tsx": [
    {
      "description": "Tooltips trigger is the the element that toggles the tooltip",
      "methods": [],
      "displayName": "TooltipTrigger",
>>>>>>> 33c0d3e (Fix eslint setup)
      "props": {
        "asChild": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "`asChild` allows the user to pass any element as the anchor",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        }
      }
    }
  ],
<<<<<<< HEAD
  "../ui/src/components/tooltip/tooltip.tsx": [
    {
      "description": "Tooltips display informative text when users hover over, focus on, or tap an element.",
      "methods": [],
      "displayName": "Tooltip",
      "props": {
        "children": {
          "required": true,
          "tsType": {
            "name": "ReactNode"
          },
          "description": "Tooltip reference element."
        },
        "initialOpen": {
=======
      "displayName": "IconButton",
      "props": {
        "tooltip": {
>>>>>>> dcde824 (fix props and desc not displaying)
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "If true, the component is shown at initial"
        },
        "placement": {
          "required": false,
          "tsType": {
            "name": "Placement"
          },
          "description": "Tooltip placement."
        },
        "open": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "If true, the component is shown."
        },
        "onOpenChange": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(open: boolean) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "boolean"
                  },
                  "name": "open"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "Callback fired when the component requests to be open."
        }
      }
    }
  ],
=======
>>>>>>> f70719d (Add doc-extract plugin)
=======
>>>>>>> 33c0d3e (Fix eslint setup)
  "../ui/src/components/input/clear-button/clear-button.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "ClearButton",
      "props": {
        "onClick": {
          "required": true,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => void",
            "signature": {
              "arguments": [],
              "return": {
                "name": "void"
              }
            }
<<<<<<< HEAD
=======
=======
          },
          "description": ""
=======
>>>>>>> 20599a2 (Add node doc)
          },
          "description": ""
        },
        "size": {
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          },
          "required": false
        },
        "variant": {
          "defaultValue": {
            "value": "'primary'",
            "computed": false
          },
          "required": false
<<<<<<< HEAD
=======
>>>>>>> 89cf5f0 (Fix node handle sizing)
>>>>>>> 20599a2 (Add node doc)
        }
      }
    }
  ],
<<<<<<< HEAD
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> 1add3c9 (Add remaining node components)
=======
>>>>>>> fb3ca13 (Clean up)
=======
>>>>>>> 89cf5f0 (Fix node handle sizing)
>>>>>>> 20599a2 (Add node doc)
  "../ui/src/components/button/base-button/base-button.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "BaseButton",
      "props": {
        "tooltip": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "tooltipType": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "'default' | 'blue'",
            "elements": [
              {
                "name": "literal",
                "value": "'default'"
              },
              {
                "name": "literal",
                "value": "'blue'"
              }
            ]
          },
          "description": "",
          "defaultValue": {
            "value": "'default'",
            "computed": false
          }
        },
        "size": {
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          },
          "required": false
        }
      }
    }
  ],
<<<<<<< HEAD
=======
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> f70719d (Add doc-extract plugin)
=======
>>>>>>> 00200e7 (Create docs for NodePanel)
=======
>>>>>>> 1add3c9 (Add remaining node components)
=======
>>>>>>> 1f20cdb (Fix decision log listing generation)
=======
>>>>>>> fb3ca13 (Clean up)
>>>>>>> 20599a2 (Add node doc)
  "../ui/src/components/button/icon-button/icon-button.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "IconButton",
      "props": {
        "tooltip": {
          "required": false,
          "tsType": {
            "name": "string"
<<<<<<< HEAD
=======
>>>>>>> 9e5369e (Add decision log listing)
>>>>>>> 20599a2 (Add node doc)
          },
          "description": ""
        },
        "tooltipType": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "'default' | 'blue'",
            "elements": [
              {
                "name": "literal",
                "value": "'default'"
              },
              {
                "name": "literal",
                "value": "'blue'"
              }
            ]
          },
          "description": ""
        },
        "size": {
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          },
          "required": false
        },
        "variant": {
          "defaultValue": {
            "value": "'primary'",
            "computed": false
          },
          "required": false
        },
        "shape": {
          "defaultValue": {
            "value": "''",
            "computed": false
          },
          "required": false
        }
      }
    }
  ],
  "../ui/src/components/button/nav-button/nav-button.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "NavButton",
      "props": {
        "tooltip": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "tooltipType": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "'default' | 'blue'",
            "elements": [
              {
                "name": "literal",
                "value": "'default'"
              },
              {
                "name": "literal",
                "value": "'blue'"
              }
            ]
          },
          "description": ""
        },
        "size": {
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          },
          "required": false
        },
        "shape": {
          "defaultValue": {
            "value": "''",
            "computed": false
          },
          "required": false
        }
      }
    }
  ],
<<<<<<< HEAD
=======
  "../ui/src/components/button/label-button/label-button.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "LabelButton",
      "props": {
        "tooltip": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "tooltipType": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "'default' | 'blue'",
            "elements": [
              {
                "name": "literal",
                "value": "'default'"
              },
              {
                "name": "literal",
                "value": "'blue'"
              }
            ]
          },
          "description": ""
        },
        "size": {
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          },
          "required": false
        },
        "variant": {
          "defaultValue": {
            "value": "'primary'",
            "computed": false
          },
          "required": false
        }
      }
    }
  ],
<<<<<<< HEAD
<<<<<<< HEAD
  "../ui/src/components/button/base-button/base-button.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "BaseButton",
      "props": {
        "tooltip": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "tooltipType": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "'default' | 'blue'",
            "elements": [
              {
                "name": "literal",
                "value": "'default'"
              },
              {
                "name": "literal",
                "value": "'blue'"
              }
            ]
          },
          "description": "",
          "defaultValue": {
            "value": "'default'",
            "computed": false
          }
        },
        "size": {
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          },
          "required": false
        }
      }
    }
  ],
<<<<<<< HEAD
  "../ui/src/components/button/base-button/base-button.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "BaseButton",
      "props": {
        "tooltip": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "tooltipType": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "'default' | 'blue'",
            "elements": [
              {
                "name": "literal",
                "value": "'default'"
              },
              {
                "name": "literal",
                "value": "'blue'"
              }
            ]
          },
          "description": "",
          "defaultValue": {
            "value": "'default'",
            "computed": false
          }
        },
        "size": {
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          },
          "required": false
        }
      }
    }
  ],
=======
>>>>>>> 1d274a5 (add react flow styles to shadow dom)
  "../ui/src/components/button/icon-button/icon-button.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "IconButton",
      "props": {
        "tooltip": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "tooltipType": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "'default' | 'blue'",
            "elements": [
              {
                "name": "literal",
                "value": "'default'"
              },
              {
                "name": "literal",
                "value": "'blue'"
              }
            ]
          },
          "description": ""
        },
        "size": {
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          },
          "required": false
        },
        "variant": {
          "defaultValue": {
            "value": "'primary'",
            "computed": false
          },
          "required": false
        },
        "shape": {
          "defaultValue": {
            "value": "''",
            "computed": false
          },
          "required": false
        }
      }
    }
  ],
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> 20599a2 (Add node doc)
  "../ui/src/components/button/icon-label-button/icon-label-button.tsx": [
    {
      "description": "A flexible button component that allows only specific combinations of children:\n- Icon followed by text.\n- Text followed by an Icon.\n- Icon, text and another Icon.\n\nExamples:\n```tsx\n<IconLabelButton {...props} >\n  <PlusCircle />\n  Button\n</IconLabelButton>\n\n<Button {...props} >\n  Button\n  <PlusCircle />\n</Button>\n\n<Button {...props} >\n  <PlusCircle />\n  Button\n  <PlusCircle />\n</Button>\n```",
      "methods": [],
      "displayName": "IconLabelButton",
      "props": {
        "tooltip": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "tooltipType": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "'default' | 'blue'",
            "elements": [
              {
                "name": "literal",
                "value": "'default'"
              },
              {
                "name": "literal",
                "value": "'blue'"
              }
            ]
          },
          "description": ""
        },
        "size": {
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          },
          "required": false
        },
        "variant": {
          "defaultValue": {
            "value": "'primary'",
            "computed": false
          },
          "required": false
        }
      }
    }
  ],
<<<<<<< HEAD
=======
  "../ui/src/components/button/label-button/label-button.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "LabelButton",
      "props": {
        "tooltip": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "tooltipType": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "'default' | 'blue'",
            "elements": [
              {
                "name": "literal",
                "value": "'default'"
              },
              {
                "name": "literal",
                "value": "'blue'"
              }
            ]
          },
          "description": ""
        },
        "size": {
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          },
          "required": false
        },
        "variant": {
          "defaultValue": {
            "value": "'primary'",
            "computed": false
          },
          "required": false
        }
      }
    }
  ],
=======
>>>>>>> 1d274a5 (add react flow styles to shadow dom)
=======
>>>>>>> 9e5369e (Add decision log listing)
  "../ui/src/components/button/nav-button/nav-button.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "NavButton",
      "props": {
        "tooltip": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "tooltipType": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "'default' | 'blue'",
            "elements": [
              {
                "name": "literal",
                "value": "'default'"
              },
              {
                "name": "literal",
                "value": "'blue'"
              }
            ]
          },
          "description": ""
        },
        "size": {
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          },
          "required": false
        },
        "shape": {
          "defaultValue": {
            "value": "''",
            "computed": false
          },
          "required": false
        }
      }
    }
  ],
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> 20599a2 (Add node doc)
  "../ui/src/components/node/node-icon/node-icon.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "NodeIcon",
      "props": {
        "icon": {
          "required": true,
          "tsType": {
            "name": "ReactNode"
          },
          "description": ""
        },
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        }
      }
    }
  ],
<<<<<<< HEAD
=======
=======
>>>>>>> 1d274a5 (add react flow styles to shadow dom)
  "../ui/src/components/node/node-description/node-description.tsx": [
=======
  "../ui/src/components/input/clear-button/clear-button.tsx": [
>>>>>>> 9e5369e (Add decision log listing)
=======
  "../ui/src/components/button/label-button/label-button.tsx": [
>>>>>>> f70719d (Add doc-extract plugin)
    {
      "description": "",
      "methods": [],
      "displayName": "LabelButton",
      "props": {
        "tooltip": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "tooltipType": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "'default' | 'blue'",
            "elements": [
              {
                "name": "literal",
                "value": "'default'"
              },
              {
                "name": "literal",
                "value": "'blue'"
              }
            ]
          },
          "description": ""
        },
        "size": {
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          },
          "required": false
        },
        "variant": {
          "defaultValue": {
            "value": "'primary'",
            "computed": false
          },
          "required": false
=======
  "../ui/src/components/input/clear-button/clear-button.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "ClearButton",
      "props": {
        "onClick": {
          "required": true,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => void",
            "signature": {
              "arguments": [],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
>>>>>>> fb3ca13 (Clean up)
        }
      }
    }
  ],
<<<<<<< HEAD
<<<<<<< HEAD
=======
  "../ui/src/components/button/icon-label-button/icon-label-button.tsx": [
    {
      "description": "A flexible button component that allows only specific combinations of children:\n- Icon followed by text.\n- Text followed by an Icon.\n- Icon, text and another Icon.\n\nExamples:\n```tsx\n<IconLabelButton {...props} >\n  <PlusCircle />\n  Button\n</IconLabelButton>\n\n<Button {...props} >\n  Button\n  <PlusCircle />\n</Button>\n\n<Button {...props} >\n  <PlusCircle />\n  Button\n  <PlusCircle />\n</Button>\n```",
      "methods": [],
      "displayName": "IconLabelButton",
      "props": {
        "tooltip": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "tooltipType": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "'default' | 'blue'",
            "elements": [
              {
                "name": "literal",
                "value": "'default'"
              },
              {
                "name": "literal",
                "value": "'blue'"
              }
            ]
          },
          "description": ""
        },
        "size": {
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          },
          "required": false
        },
        "variant": {
          "defaultValue": {
            "value": "'primary'",
            "computed": false
          },
          "required": false
        }
      }
    }
  ],
>>>>>>> 1d274a5 (add react flow styles to shadow dom)
=======
>>>>>>> 1add3c9 (Add remaining node components)
=======
>>>>>>> fb3ca13 (Clean up)
>>>>>>> 20599a2 (Add node doc)
  "../ui/src/components/node/node-as-port-wrapper/node-as-port-wrapper.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "NodeAsPortWrapper",
      "props": {
        "isConnecting": {
          "required": true,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "targetPortPosition": {
          "required": true,
          "tsType": {
            "name": "union",
            "raw": "'left' | 'top' | 'right' | 'bottom'",
            "elements": [
              {
                "name": "literal",
                "value": "'left'"
              },
              {
                "name": "literal",
                "value": "'top'"
              },
              {
                "name": "literal",
                "value": "'right'"
              },
              {
                "name": "literal",
                "value": "'bottom'"
              }
            ]
          },
          "description": ""
        }
      }
    }
  ],
<<<<<<< HEAD
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
=======
=======
  "../ui/src/components/input/clear-button/clear-button.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "ClearButton",
      "props": {
        "onClick": {
          "required": true,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => void",
            "signature": {
              "arguments": [],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        }
      }
    }
  ],
>>>>>>> 1f20cdb (Fix decision log listing generation)
=======
>>>>>>> fb3ca13 (Clean up)
  "../ui/src/components/node/node-description/node-description.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "NodeDescription",
      "props": {
        "label": {
          "required": true,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "description": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        }
      }
    }
  ],
>>>>>>> 1add3c9 (Add remaining node components)
  "../ui/src/components/node/node-icon/node-icon.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "NodeIcon",
      "props": {
        "icon": {
          "required": true,
          "tsType": {
            "name": "ReactNode"
          },
          "description": ""
        },
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        }
      }
    }
  ],
<<<<<<< HEAD
>>>>>>> 1d274a5 (add react flow styles to shadow dom)
>>>>>>> 20599a2 (Add node doc)
  "../ui/src/components/select/select-button/select-button.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "SelectButton"
    }
  ],
<<<<<<< HEAD
=======
<<<<<<< HEAD
=======
  "../ui/src/components/snackbar/components/action-buttons.tsx": [
=======
  "../ui/src/components/node/node-description/node-description.tsx": [
>>>>>>> dcde824 (fix props and desc not displaying)
    {
      "description": "",
      "methods": [],
      "displayName": "NodeDescription",
      "props": {
        "label": {
          "required": true,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "description": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        }
      }
    }
  ],
=======
>>>>>>> 89cf5f0 (Fix node handle sizing)
  "../ui/src/components/node/node-as-port-wrapper/node-as-port-wrapper.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "NodeAsPortWrapper",
      "props": {
        "isConnecting": {
          "required": true,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "targetPortPosition": {
          "required": true,
          "tsType": {
            "name": "union",
            "raw": "'left' | 'top' | 'right' | 'bottom'",
            "elements": [
              {
                "name": "literal",
                "value": "'left'"
              },
              {
                "name": "literal",
                "value": "'top'"
              },
              {
                "name": "literal",
                "value": "'right'"
              },
              {
                "name": "literal",
                "value": "'bottom'"
              }
            ]
          },
          "description": ""
        }
      }
    }
  ],
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> 1d274a5 (add react flow styles to shadow dom)
=======
=======
  "../ui/src/components/input/clear-button/clear-button.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "ClearButton",
      "props": {
        "onClick": {
          "required": true,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => void",
            "signature": {
              "arguments": [],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        }
      }
    }
  ],
>>>>>>> 89cf5f0 (Fix node handle sizing)
  "../ui/src/components/node/node-description/node-description.tsx": [
=======
  "../ui/src/components/select/select-button/select-button.tsx": [
>>>>>>> 1add3c9 (Add remaining node components)
    {
      "description": "",
      "methods": [],
      "displayName": "SelectButton"
    }
  ],
<<<<<<< HEAD
=======
>>>>>>> f70719d (Add doc-extract plugin)
  "../ui/src/components/node/node-icon/node-icon.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "NodeIcon",
      "props": {
        "icon": {
          "required": true,
          "tsType": {
            "name": "ReactNode"
          },
          "description": ""
        },
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        }
      }
    }
  ],
<<<<<<< HEAD
>>>>>>> 9e5369e (Add decision log listing)
  "../ui/src/components/select/select-option/select-option.tsx": [
=======
  "../ui/src/components/node/node-description/node-description.tsx": [
>>>>>>> f70719d (Add doc-extract plugin)
    {
      "description": "",
      "methods": [],
      "displayName": "NodeDescription",
      "props": {
        "label": {
          "required": true,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "description": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        }
      }
    }
  ],
<<<<<<< HEAD
<<<<<<< HEAD
  "../ui/src/components/select/select-value/select-value.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "SelectValue",
      "props": {
        "selectedOptionLabel": {
          "required": true,
          "tsType": {
            "name": "union",
            "raw": "SelectOption<string | number> | null",
            "elements": [
              {
                "name": "SelectOption",
                "elements": [
                  {
                    "name": "union",
                    "raw": "string | number",
                    "elements": [
                      {
                        "name": "string"
                      },
                      {
                        "name": "number"
                      }
                    ]
                  }
                ],
                "raw": "SelectOption<string | number>"
=======
  "../ui/src/components/select/select-option/select-option.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "SelectOption",
      "props": {
        "type": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "'item' | 'separator'",
            "elements": [
              {
                "name": "literal",
                "value": "'item'"
              },
              {
                "name": "literal",
                "value": "'separator'"
              }
            ]
          },
          "description": ""
        },
        "label": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "disabled": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "value": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | number | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "number"
>>>>>>> 00200e7 (Create docs for NodePanel)
              },
              {
                "name": "null"
              }
            ]
          },
          "description": ""
        },
<<<<<<< HEAD
        "items": {
          "required": true,
          "tsType": {
            "name": "Array",
            "elements": [
              {
                "name": "intersection",
                "raw": "ListItem & {\n  value?: string | number | null;\n  label?: string;\n}",
                "elements": [
                  {
                    "name": "intersection",
                    "raw": "Partial<WithIcon> & {\n  type?: 'item' | 'separator';\n  label?: string;\n  disabled?: boolean;\n}",
                    "elements": [
                      {
                        "name": "Partial",
                        "elements": [
                          {
                            "name": "signature",
                            "type": "object",
                            "raw": "{\n  /**\n   * Icon content React Node\n   */\n  icon?: React.ReactNode;\n}",
                            "signature": {
                              "properties": [
                                {
                                  "key": "icon",
                                  "value": {
                                    "name": "ReactReactNode",
                                    "raw": "React.ReactNode",
                                    "required": false
                                  },
                                  "description": "Icon content React Node"
                                }
                              ]
                            }
                          }
                        ],
                        "raw": "Partial<WithIcon>"
                      },
                      {
                        "name": "signature",
                        "type": "object",
                        "raw": "{\n  type?: 'item' | 'separator';\n  label?: string;\n  disabled?: boolean;\n}",
                        "signature": {
                          "properties": [
                            {
                              "key": "type",
                              "value": {
                                "name": "union",
                                "raw": "'item' | 'separator'",
                                "elements": [
                                  {
                                    "name": "literal",
                                    "value": "'item'"
                                  },
                                  {
                                    "name": "literal",
                                    "value": "'separator'"
                                  }
                                ],
                                "required": false
                              }
                            },
                            {
                              "key": "label",
                              "value": {
                                "name": "string",
                                "required": false
                              }
                            },
                            {
                              "key": "disabled",
                              "value": {
                                "name": "boolean",
                                "required": false
                              }
                            }
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "name": "signature",
                    "type": "object",
                    "raw": "{\n  value?: string | number | null;\n  label?: string;\n}",
                    "signature": {
                      "properties": [
                        {
                          "key": "value",
                          "value": {
                            "name": "union",
                            "raw": "string | number | null",
                            "elements": [
                              {
                                "name": "string"
                              },
                              {
                                "name": "number"
                              },
                              {
                                "name": "null"
                              }
                            ],
                            "required": false
                          }
                        },
                        {
                          "key": "label",
                          "value": {
                            "name": "string",
                            "required": false
                          }
                        }
                      ]
                    }
                  }
                ]
              }
            ],
            "raw": "SelectItem[]"
          },
          "description": ""
        },
        "placeholder": {
=======
  "../ui/src/components/node/node-icon/node-icon.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "NodeIcon",
      "props": {
        "icon": {
          "required": true,
          "tsType": {
            "name": "ReactNode"
          },
          "description": ""
        },
        "className": {
>>>>>>> dcde824 (fix props and desc not displaying)
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
<<<<<<< HEAD
        }
      }
    }
  ],
<<<<<<< HEAD
=======
  "../ui/src/components/snackbar/components/icon.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Icon",
      "props": {
        "isCentered": {
          "required": true,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "variant": {
          "required": true,
          "tsType": {
            "name": "literal",
            "value": "`${SnackbarType}`"
          },
          "description": ""
=======
>>>>>>> dcde824 (fix props and desc not displaying)
        }
      }
    }
  ],
<<<<<<< HEAD
>>>>>>> 1d274a5 (add react flow styles to shadow dom)
=======
  "../ui/src/components/snackbar/components/action-buttons.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "ActionButtons",
      "props": {
        "variant": {
          "required": true,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "buttonLabel": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "onButtonClick": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => void",
            "signature": {
              "arguments": [],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "close": {
          "required": true,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "onClose": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => void",
            "signature": {
              "arguments": [],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        }
      }
    }
  ],
>>>>>>> dcde824 (fix props and desc not displaying)
  "../ui/src/components/switch/icon-switch/icon-switch.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "IconSwitch",
      "props": {
        "IconChecked": {
          "required": true,
          "tsType": {
            "name": "ReactNode"
          },
          "description": ""
        },
        "variant": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "'primary' | 'secondary'",
            "elements": [
              {
                "name": "literal",
                "value": "'primary'"
              },
              {
                "name": "literal",
                "value": "'secondary'"
              }
            ]
          },
          "description": "",
          "defaultValue": {
            "value": "'primary'",
            "computed": false
          }
        },
        "size": {
          "required": false,
          "tsType": {
            "name": "SelectorSize"
          },
          "description": "Size of the switch component"
        },
        "styles": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Custom styles to apply to the switch"
        },
        "thumbChildren": {
          "required": false,
          "tsType": {
            "name": "ReactReactNode",
            "raw": "React.ReactNode"
          },
          "description": "Custom content for the thumb of the switch"
        },
        "trackChildren": {
          "required": false,
          "tsType": {
            "name": "ReactReactNode",
            "raw": "React.ReactNode"
          },
          "description": "Custom content for the track of the switch"
        },
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Custom class name for the switch component"
        },
        "checked": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Whether the switch is checked or not"
        },
        "disabled": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Whether the switch is disabled"
        },
        "onChange": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(checked: boolean, event: ChangeEvent<HTMLInputElement>) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "boolean"
                  },
                  "name": "checked"
                },
                {
                  "type": {
                    "name": "ChangeEvent",
                    "elements": [
                      {
                        "name": "HTMLInputElement"
                      }
                    ],
                    "raw": "ChangeEvent<HTMLInputElement>"
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "Callback function when the switch state changes"
=======
        "size": {
          "required": false,
          "tsType": {
            "name": "ItemSize"
          },
          "description": "",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          }
>>>>>>> 00200e7 (Create docs for NodePanel)
        }
      }
    }
  ],
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> 89cf5f0 (Fix node handle sizing)
  "../ui/src/components/snackbar/components/action-buttons.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "ActionButtons",
      "props": {
        "variant": {
          "required": true,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "buttonLabel": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "onButtonClick": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => void",
            "signature": {
              "arguments": [],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "close": {
          "required": true,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "onClose": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => void",
            "signature": {
              "arguments": [],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        }
      }
    }
  ],
<<<<<<< HEAD
=======
  "../ui/src/components/snackbar/components/message.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Message",
      "props": {
        "title": {
          "required": true,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "subtitle": {
          "required": true,
          "tsType": {
            "name": "union",
            "raw": "string | undefined",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "undefined"
              }
            ]
          },
          "description": ""
        }
      }
    }
  ],
>>>>>>> 89cf5f0 (Fix node handle sizing)
  "../ui/src/components/snackbar/components/icon.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Icon",
      "props": {
        "isCentered": {
          "required": true,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "variant": {
          "required": true,
          "tsType": {
            "name": "literal",
            "value": "`${SnackbarType}`"
          },
          "description": ""
        }
      }
    }
  ],
<<<<<<< HEAD
=======
>>>>>>> 1d274a5 (add react flow styles to shadow dom)
  "../ui/src/components/snackbar/components/message.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Message",
      "props": {
        "title": {
          "required": true,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "subtitle": {
          "required": true,
          "tsType": {
            "name": "union",
            "raw": "string | undefined",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "undefined"
              }
            ]
          },
          "description": ""
        }
      }
    }
<<<<<<< HEAD
=======
  ],
  "../ui/src/components/button/base-button/base-button.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "BaseButton",
      "props": {
        "tooltip": {
          "required": false,
          "tsType": {
=======
  "../ui/src/components/snackbar/components/message.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Message",
      "props": {
        "title": {
          "required": true,
          "tsType": {
>>>>>>> dcde824 (fix props and desc not displaying)
            "name": "string"
          },
          "description": ""
        },
        "subtitle": {
          "required": true,
          "tsType": {
            "name": "union",
            "raw": "string | undefined",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "undefined"
              }
            ]
          },
          "description": ""
        }
      }
    }
  ],
=======
>>>>>>> 9e5369e (Add decision log listing)
=======
>>>>>>> 00200e7 (Create docs for NodePanel)
  "../ui/src/components/select/select-button/select-button.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "SelectButton"
    }
  ],
=======
>>>>>>> 1add3c9 (Add remaining node components)
=======
>>>>>>> 89cf5f0 (Fix node handle sizing)
  "../ui/src/components/select/select-value/select-value.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "SelectValue",
      "props": {
        "selectedOptionLabel": {
          "required": true,
          "tsType": {
            "name": "union",
            "raw": "SelectOption<string | number> | null",
            "elements": [
              {
                "name": "SelectOption",
                "elements": [
                  {
                    "name": "union",
                    "raw": "string | number",
                    "elements": [
                      {
                        "name": "string"
                      },
                      {
                        "name": "number"
                      }
                    ]
                  }
                ],
                "raw": "SelectOption<string | number>"
              },
              {
                "name": "null"
              }
            ]
          },
          "description": ""
        },
        "items": {
          "required": true,
          "tsType": {
            "name": "Array",
            "elements": [
              {
                "name": "intersection",
                "raw": "ListItem & {\n  value?: string | number | null;\n  label?: string;\n}",
                "elements": [
                  {
                    "name": "intersection",
                    "raw": "Partial<WithIcon> & {\n  type?: 'item' | 'separator';\n  label?: string;\n  disabled?: boolean;\n}",
                    "elements": [
                      {
                        "name": "Partial",
                        "elements": [
                          {
                            "name": "signature",
                            "type": "object",
                            "raw": "{\n  /**\n   * Icon content React Node\n   */\n  icon?: React.ReactNode;\n}",
                            "signature": {
                              "properties": [
                                {
                                  "key": "icon",
                                  "value": {
                                    "name": "ReactReactNode",
                                    "raw": "React.ReactNode",
                                    "required": false
                                  },
                                  "description": "Icon content React Node"
                                }
                              ]
                            }
                          }
                        ],
                        "raw": "Partial<WithIcon>"
                      },
                      {
                        "name": "signature",
                        "type": "object",
                        "raw": "{\n  type?: 'item' | 'separator';\n  label?: string;\n  disabled?: boolean;\n}",
                        "signature": {
                          "properties": [
                            {
                              "key": "type",
                              "value": {
                                "name": "union",
                                "raw": "'item' | 'separator'",
                                "elements": [
                                  {
                                    "name": "literal",
                                    "value": "'item'"
                                  },
                                  {
                                    "name": "literal",
                                    "value": "'separator'"
                                  }
                                ],
                                "required": false
                              }
                            },
                            {
                              "key": "label",
                              "value": {
                                "name": "string",
                                "required": false
                              }
                            },
                            {
                              "key": "disabled",
                              "value": {
                                "name": "boolean",
                                "required": false
                              }
                            }
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "name": "signature",
                    "type": "object",
                    "raw": "{\n  value?: string | number | null;\n  label?: string;\n}",
                    "signature": {
                      "properties": [
                        {
                          "key": "value",
                          "value": {
                            "name": "union",
                            "raw": "string | number | null",
                            "elements": [
                              {
                                "name": "string"
                              },
                              {
                                "name": "number"
                              },
                              {
                                "name": "null"
                              }
                            ],
                            "required": false
                          }
                        },
                        {
                          "key": "label",
                          "value": {
                            "name": "string",
                            "required": false
                          }
                        }
                      ]
                    }
                  }
                ]
              }
            ],
            "raw": "SelectItem[]"
          },
          "description": ""
        },
        "placeholder": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        }
      }
    }
  ],
<<<<<<< HEAD
  "../ui/src/components/snackbar/components/action-buttons.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "ActionButtons",
      "props": {
        "variant": {
          "required": true,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "buttonLabel": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "onButtonClick": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => void",
            "signature": {
              "arguments": [],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "close": {
          "required": true,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "onClose": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => void",
            "signature": {
              "arguments": [],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        }
      }
    }
  ],
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> 20599a2 (Add node doc)
  "../ui/src/components/select/select-option/select-option.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "SelectOption",
      "props": {
        "type": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "'item' | 'separator'",
            "elements": [
              {
                "name": "literal",
                "value": "'item'"
              },
              {
                "name": "literal",
                "value": "'separator'"
              }
            ]
          },
          "description": ""
        },
        "label": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "disabled": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "value": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | number | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "number"
              },
              {
                "name": "null"
              }
            ]
          },
          "description": ""
        },
        "size": {
          "required": false,
          "tsType": {
            "name": "ItemSize"
          },
          "description": "",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          }
        }
      }
    }
  ],
<<<<<<< HEAD
  "../ui/src/components/select/select-value/select-value.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "SelectValue",
      "props": {
        "selectedOptionLabel": {
          "required": true,
          "tsType": {
            "name": "union",
            "raw": "SelectOption<string | number> | null",
            "elements": [
              {
                "name": "SelectOption",
                "elements": [
                  {
                    "name": "union",
                    "raw": "string | number",
                    "elements": [
                      {
                        "name": "string"
                      },
                      {
                        "name": "number"
                      }
                    ]
                  }
                ],
                "raw": "SelectOption<string | number>"
              },
              {
                "name": "null"
              }
            ]
          },
          "description": ""
        },
        "items": {
          "required": true,
          "tsType": {
            "name": "Array",
            "elements": [
              {
                "name": "intersection",
                "raw": "ListItem & {\n  value?: string | number | null;\n  label?: string;\n}",
                "elements": [
                  {
                    "name": "intersection",
                    "raw": "Partial<WithIcon> & {\n  type?: 'item' | 'separator';\n  label?: string;\n  disabled?: boolean;\n}",
                    "elements": [
                      {
                        "name": "Partial",
                        "elements": [
                          {
                            "name": "signature",
                            "type": "object",
                            "raw": "{\n  /**\n   * Icon content React Node\n   */\n  icon?: React.ReactNode;\n}",
                            "signature": {
                              "properties": [
                                {
                                  "key": "icon",
                                  "value": {
                                    "name": "ReactReactNode",
                                    "raw": "React.ReactNode",
                                    "required": false
                                  },
                                  "description": "Icon content React Node"
                                }
                              ]
                            }
                          }
                        ],
                        "raw": "Partial<WithIcon>"
                      },
                      {
                        "name": "signature",
                        "type": "object",
                        "raw": "{\n  type?: 'item' | 'separator';\n  label?: string;\n  disabled?: boolean;\n}",
                        "signature": {
                          "properties": [
                            {
                              "key": "type",
                              "value": {
                                "name": "union",
                                "raw": "'item' | 'separator'",
                                "elements": [
                                  {
                                    "name": "literal",
                                    "value": "'item'"
                                  },
                                  {
                                    "name": "literal",
                                    "value": "'separator'"
                                  }
                                ],
                                "required": false
                              }
                            },
                            {
                              "key": "label",
                              "value": {
                                "name": "string",
                                "required": false
                              }
                            },
                            {
                              "key": "disabled",
                              "value": {
                                "name": "boolean",
                                "required": false
                              }
                            }
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "name": "signature",
                    "type": "object",
                    "raw": "{\n  value?: string | number | null;\n  label?: string;\n}",
                    "signature": {
                      "properties": [
                        {
                          "key": "value",
                          "value": {
                            "name": "union",
                            "raw": "string | number | null",
                            "elements": [
                              {
                                "name": "string"
                              },
                              {
                                "name": "number"
                              },
                              {
                                "name": "null"
                              }
                            ],
                            "required": false
                          }
                        },
                        {
                          "key": "label",
                          "value": {
                            "name": "string",
                            "required": false
                          }
                        }
                      ]
                    }
                  }
                ]
              }
            ],
            "raw": "SelectItem[]"
          },
          "description": ""
        },
        "placeholder": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        }
      }
    }
  ],
  "../ui/src/components/node/node-description/node-description.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "NodeDescription",
      "props": {
        "label": {
          "required": true,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "description": {
          "required": false,
          "tsType": {
            "name": "string"
=======
=======
>>>>>>> 1add3c9 (Add remaining node components)
=======
>>>>>>> fb3ca13 (Clean up)
  "../ui/src/components/snackbar/components/icon.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Icon",
      "props": {
        "isCentered": {
          "required": true,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "variant": {
          "required": true,
          "tsType": {
            "name": "literal",
            "value": "`${SnackbarType}`"
>>>>>>> 20599a2 (Add node doc)
          },
          "description": ""
        }
      }
    }
<<<<<<< HEAD
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> 1d274a5 (add react flow styles to shadow dom)
=======
=======
>>>>>>> 1add3c9 (Add remaining node components)
=======
>>>>>>> fb3ca13 (Clean up)
>>>>>>> 20599a2 (Add node doc)
  ],
  "../ui/src/components/snackbar/components/message.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Message",
      "props": {
        "title": {
          "required": true,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "subtitle": {
          "required": true,
          "tsType": {
            "name": "union",
            "raw": "string | undefined",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "undefined"
              }
            ]
          },
          "description": ""
        }
      }
    }
  ],
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> 00200e7 (Create docs for NodePanel)
=======
>>>>>>> 1add3c9 (Add remaining node components)
=======
>>>>>>> 1f20cdb (Fix decision log listing generation)
=======
>>>>>>> fb3ca13 (Clean up)
=======
>>>>>>> 89cf5f0 (Fix node handle sizing)
  "../ui/src/components/switch/icon-switch/icon-switch.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "IconSwitch",
      "props": {
        "IconChecked": {
          "required": true,
          "tsType": {
            "name": "ReactNode"
          },
          "description": ""
        },
        "variant": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "'primary' | 'secondary'",
            "elements": [
              {
                "name": "literal",
                "value": "'primary'"
              },
              {
                "name": "literal",
                "value": "'secondary'"
              }
            ]
          },
          "description": "",
          "defaultValue": {
            "value": "'primary'",
            "computed": false
          }
        },
        "size": {
          "required": false,
          "tsType": {
            "name": "SelectorSize"
          },
          "description": "Size of the switch component"
        },
        "styles": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Custom styles to apply to the switch"
        },
        "thumbChildren": {
          "required": false,
          "tsType": {
            "name": "ReactReactNode",
            "raw": "React.ReactNode"
          },
          "description": "Custom content for the thumb of the switch"
        },
        "trackChildren": {
          "required": false,
          "tsType": {
            "name": "ReactReactNode",
            "raw": "React.ReactNode"
          },
          "description": "Custom content for the track of the switch"
        },
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Custom class name for the switch component"
        },
        "checked": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Whether the switch is checked or not"
        },
        "disabled": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Whether the switch is disabled"
        },
        "onChange": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(checked: boolean, event: ChangeEvent<HTMLInputElement>) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "boolean"
                  },
                  "name": "checked"
                },
                {
                  "type": {
                    "name": "ChangeEvent",
                    "elements": [
                      {
                        "name": "HTMLInputElement"
                      }
                    ],
                    "raw": "ChangeEvent<HTMLInputElement>"
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "Callback function when the switch state changes"
        }
      }
    }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> 1f20cdb (Fix decision log listing generation)
  ],
<<<<<<< HEAD
  "../ui/src/components/snackbar/components/action-buttons.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "ActionButtons",
      "props": {
        "variant": {
          "required": true,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "buttonLabel": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "onButtonClick": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => void",
            "signature": {
              "arguments": [],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "close": {
          "required": true,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "onClose": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => void",
            "signature": {
              "arguments": [],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        }
      }
    }
  ],
  "../ui/src/components/snackbar/components/icon.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Icon",
      "props": {
        "isCentered": {
          "required": true,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "variant": {
          "required": true,
          "tsType": {
            "name": "literal",
            "value": "`${SnackbarType}`"
          },
          "description": ""
        }
      }
    }
  ],
  "../ui/src/components/input/clear-button/clear-button.tsx": [
=======
  "../ui/src/components/snackbar/components/message.tsx": [
>>>>>>> 20599a2 (Add node doc)
    {
      "description": "",
      "methods": [],
      "displayName": "Message",
      "props": {
        "title": {
          "required": true,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "subtitle": {
          "required": true,
          "tsType": {
            "name": "union",
            "raw": "string | undefined",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "undefined"
              }
            ]
          },
          "description": ""
        }
      }
    }
<<<<<<< HEAD
>>>>>>> 9e5369e (Add decision log listing)
=======
>>>>>>> f70719d (Add doc-extract plugin)
=======
  ],
  "../ui/src/components/snackbar/components/icon.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Icon",
      "props": {
        "isCentered": {
          "required": true,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "variant": {
          "required": true,
          "tsType": {
            "name": "literal",
            "value": "`${SnackbarType}`"
          },
          "description": ""
        }
      }
    }
>>>>>>> 1f20cdb (Fix decision log listing generation)
=======
>>>>>>> fb3ca13 (Clean up)
  ]
}
=======
{}
>>>>>>> 4dc4239 (Enable sorting for generated props file)
